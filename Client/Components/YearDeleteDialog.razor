@namespace Client.Components

@using Client.Models
@inject Client.Services.BudgetApiClient budgetApiClient
@inject Client.Services.YearApiClient yearsApiClient
@inject Client.Services.DateApiClient dateApiClient
@inject Client.Services.TrackedBudgetApiClient trackedApiClient
@inject ISnackbar Snackbar
@inject IMessageService MessageService

<MudDialog>
    <DialogContent>
        <MudSelect T="YearModel" Label="Select Year" @Value="@_selectedYear"
            ValueChanged="(year => BindSelectedYear(year))" AnchorOrigin="Origin.BottomCenter">
            @foreach (var year in _years!)
            {
                <MudSelectItem Value="@year">@year.Name</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="MudBlazor.Color.Primary" OnClick="SubmitAsync">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {

    private int _selectedYearId;
    private YearModel? _selectedYear { get; set; }
    private IList<YearModel>? _years = new List<YearModel>();
    private IList<BudgetModel>? _income = new List<BudgetModel>();
    private IList<BudgetModel>? _expenses = new List<BudgetModel>();

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _years = await yearsApiClient.GetYearsAsync();
    }
    private async Task GetYearsAsync()
    {
        _income = await budgetApiClient.GetIncomeByYearIdAsync(_selectedYearId);
        _expenses = await budgetApiClient.GetExpensesByYearIdAsync(_selectedYearId);
    }

    private void BindSelectedYear(YearModel year)
    {
        _selectedYearId = year.Id;
    }

    private async Task DeleteYear()
    {
        await yearsApiClient.DeleteYearByIdAsync(_selectedYearId);
        StateHasChanged();
        await GetYearsAsync();
    }

    private async Task SubmitAsync()
    {
        await DeleteYear();
        SendMessage();
        Snackbar.Add("Year Deleted", Severity.Success);
        MudDialog?.Close(DialogResult.Ok(true));
    }
    private void Cancel()
    {
        Snackbar.Add("Delete Canceled", Severity.Warning);
        MudDialog?.Cancel();
    }
    private void SendMessage()
    {
        MessageService.SendMessage("yearDeleted");
    }

    private void ClearMessages()
    {
        MessageService.ClearMessages();
    }
}







