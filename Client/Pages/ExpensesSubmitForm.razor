@inject Client.Services.ApiClient apiClient
@using Client.Models

<MudDialog>
    <DialogContent>
        <MudSelect T="YearModel" Label="Select Year" @Value="@selectedYear"
            ValueChanged="(year => SetYearOnSelect(year))" AnchorOrigin="Origin.BottomCenter">
            @foreach (var year in Years)
            {
                <MudSelectItem Value="@year">@year.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="string" Label="Months" @bind-Value="@selectedMonth" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@("January")" />
            <MudSelectItem Value="@("February")" />
            <MudSelectItem Value="@("March")" />
            <MudSelectItem Value="@("April")" />
            <MudSelectItem Value="@("May")" />
            <MudSelectItem Value="@("June")" />
            <MudSelectItem Value="@("July")" />
            <MudSelectItem Value="@("August")" />
            <MudSelectItem Value="@("September")" />
            <MudSelectItem Value="@("October")" />
            <MudSelectItem Value="@("November")" />
            <MudSelectItem Value="@("December")" />
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=" Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="SubmitAsync">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {

    private string selectedMonth = "";
    private YearModel? selectedYear;
    private int selectedYearId;
    private List<YearModel>? Years = new List<YearModel>();
    private List<MonthModel>? Data = new List<MonthModel>();
    private List<ExpensesModel>? Expenses = new List<ExpensesModel>();
    private List<MonthModel>? Months = new List<MonthModel>();
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    protected override async void OnInitialized()
    {
        Years = await apiClient.GetYearsAsync();
        Data = await apiClient.GetSavingByEachMonthAsync();
        Months = await apiClient.GetMonthsAsync();
    }

    async Task SubmitAsync()
    {
        if ((YearFoundIn(Data)) && !(MonthFoundIn(Data)) || (!YearFoundIn(Data)) &&
        (MonthFoundIn(Data)) || (!YearFoundIn(Data)) && !(MonthFoundIn(Data)))
        {
            await AddMonthAsync();
            await GetMonthsAsync();
            await AddExpensesAsync();
            await GetExpensesAsync();
            await UpdateMonthAsync();
        }

        if ((YearFoundIn(Data) && MonthFoundIn(Data)) && ExpensesFoundIn(Data))
        {
            await AddExpensesAsync();
            await GetExpensesAsync();
            await GetMonthsAsync();
            await UpdateMonthAsync();
        }

        StateHasChanged();
        MudDialog?.Close(DialogResult.Ok(true));
    }

    private async Task GetExpensesAsync()
    {
        Expenses = await apiClient.GetExpensesAsync();
    }

    private async Task GetMonthsAsync()
    {
        Months = await apiClient.GetMonthsAsync();
    }
    private async Task AddMonthAsync()
    {
        MonthModel monthModel = new MonthModel
            {
                Name = selectedMonth,
                YearId = selectedYearId
            };

        await apiClient.PostMonthAsync(monthModel);
    }
    private async Task AddExpensesAsync()
    {
        int monthId = Months!.Where(m => m.Name == selectedMonth && m.YearId == selectedYearId).Select(m =>
        m.Id).FirstOrDefault();

        ExpensesModel ExpensesModel = new ExpensesModel
            {
                YearId = selectedYearId,
                MonthId = monthId
            };

        await apiClient.PostExpensesAsync(ExpensesModel);
    }
    private void SetYearOnSelect(YearModel year)
    {
        selectedYearId = year.Id;
    }
    private bool YearFoundIn(List<MonthModel>? data)
    {
        return Data!.Where(year => year.YearId == selectedYearId).Select(year => year.YearId ==
        selectedYearId).FirstOrDefault();
    }
    private bool MonthFoundIn(List<MonthModel>? data)
    {
        return Data!.Where(month => month.YearId == selectedYearId).Select(month =>
        month.Name!.Equals(selectedMonth)).FirstOrDefault();

    }
    private bool ExpensesFoundIn(List<MonthModel>? data)
    {
        return Data!.Where(expenses => expenses!.Name!.Equals(selectedMonth) && expenses.YearId ==
        selectedYearId).Select(expenses => expenses.ExpensesId == 0).FirstOrDefault();
    }
    private async Task UpdateMonthAsync()
    {
        MonthModel? monthModel = Months?.Where(month => month.Name == selectedMonth && month.YearId ==
        selectedYearId).Select(month => month).FirstOrDefault();

        monthModel!.ExpensesId = Expenses!.Where(expenses => expenses.MonthId == monthModel.Id).Select(expenses =>
        expenses.Id).FirstOrDefault();

        await apiClient.UpdateMonthAsync(monthModel);
    }
    private void Cancel() => MudDialog?.Cancel();
}












