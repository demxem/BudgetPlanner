@inject Client.Services.ApiClient apiClient
@using Client.Models


<MudDialog>
    <DialogContent>
        <MudSelect T="YearModel" Label="Select Year" @Value="@_selectedYear" ValueChanged="(year => SetSelected(year))"
            AnchorOrigin="Origin.BottomCenter">
            @foreach (var year in Years)
            {
                <MudSelectItem Value="@year">@year.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="string" Label="Months" @bind-Value="@_selectedMonth" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@("January")" />
            <MudSelectItem Value="@("February")" />
            <MudSelectItem Value="@("March")" />
            <MudSelectItem Value="@("April")" />
            <MudSelectItem Value="@("May")" />
            <MudSelectItem Value="@("June")" />
            <MudSelectItem Value="@("July")" />
            <MudSelectItem Value="@("August")" />
            <MudSelectItem Value="@("September")" />
            <MudSelectItem Value="@("October")" />
            <MudSelectItem Value="@("November")" />
            <MudSelectItem Value="@("Descember")" />
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=" Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="SubmitAsync">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {

    private string _selectedMonth = "";
    private YearModel? _selectedYear;
    private string _inputYear = "";
    private int _selectedYearId;
    private bool _isPresentYear;
    private bool _isPresentMonth;
    private bool _isPersentExpenses;

    public IList<YearModel>? Years = new List<YearModel>();
    public IList<MonthModel>? ExpensesByEachMonth = new List<MonthModel>();
    public IList<ExpensesModel>? Expenses = new List<ExpensesModel>();
    public IList<MonthModel> Months = new List<MonthModel>();
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Years = await apiClient.GetYearsAsync();
        ExpensesByEachMonth = await apiClient.GetExpensesByEachMonthAsync();
        Months = await apiClient.GetMonthsAsync();

    }

    public async Task GetExpensesByEachMonthAsync()
    {
        ExpensesByEachMonth = await apiClient.GetExpensesByEachMonthAsync();
    }

    public async Task GetExpenses()
    {
        Expenses = await apiClient.GetExpensesAsync();
    }

    public async Task GetMonth()
    {
        Months = await apiClient.GetMonthsAsync();
    }

    public async Task AddMonth()
    {
        MonthModel monthModel = new MonthModel { Name = _selectedMonth, YearId = _selectedYearId };
        await apiClient.PostMonthAsync(monthModel);
    }
    public async Task AddExpenses()
    {
        int monthId = Months.Where(m => m.Name == _selectedMonth && m.YearId == _selectedYearId).Select(m =>
        m.Id).FirstOrDefault();

        ExpensesModel ExpensesModel = new ExpensesModel { YearId = _selectedYearId, MonthId = monthId };
        await apiClient.PostExpensesAsync(ExpensesModel);
    }

    public void SetSelected(YearModel year)
    {
        _selectedYearId = year.Id;
    }

    public async Task UpdateMonth()
    {
        MonthModel monthModel = Months.Where(m => m.Name == _selectedMonth && m.YearId == _selectedYearId).Select(m =>
        m).FirstOrDefault();

        int ExpensesId = Expenses.Where(e => e.MonthId == monthModel.Id).Select(e => e.Id).FirstOrDefault();
        monthModel.ExpensesId = ExpensesId;
        await apiClient.UpdateMonthAsync(monthModel);
    }

    async Task SubmitAsync()
    {
        _isPresentYear = ExpensesByEachMonth.Where(x => x.YearId == _selectedYearId).Select(x => x.YearId ==
        _selectedYearId).FirstOrDefault();
        _isPresentMonth = ExpensesByEachMonth!.Where(m => m.YearId == _selectedYearId).Select(m =>
        m.Name.Equals(_selectedMonth)).FirstOrDefault();
        _isPersentExpenses = ExpensesByEachMonth!.Where(e => e.Name.Equals(_selectedMonth) && e.YearId ==
        _selectedYearId).Select(e => e.ExpensesId == 0).FirstOrDefault();

        if ((_isPresentYear && !_isPresentMonth) ||
        (!_isPresentYear && _isPresentMonth) ||
        (!_isPresentYear && !_isPresentMonth))
        {
            await AddMonth();
            await GetMonth();
            await AddExpenses();
            await GetExpenses();
            await UpdateMonth();
        }

        if ((_isPresentYear && _isPresentMonth) && !_isPersentExpenses)
        {
            await AddExpenses();
            await GetExpenses();
            await GetMonth();
            await UpdateMonth();
        }

        MudDialog?.Close(DialogResult.Ok(true));
    }
    public void Cancel() => MudDialog?.Cancel();
}







