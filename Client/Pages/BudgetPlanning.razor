@page "/budgetPlanning"
@inject Client.Services.YearApiClient yearApiClient
@inject Client.Services.MonthsApiClient monthsApiClient
@inject Client.Services.IncomeApiClient incomeApiClient
@inject Client.Services.SavingsApiClient savingsApiClient
@inject Client.Services.ExpensesApiClient expensesApiClient
@inject Client.Services.DatePicker datePicker

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager UriHelper
@inject IMessageService MessageService


<style>
    td {
        text-align: center;
        border: 1px solid rgb(190, 190, 190);
    }

    th {
        text-align: center;
        border: 1px solid rgb(190, 190, 190);
        padding: 3px;
    }

    th[scope='income-row'] {
        background-color: rgba(187, 171, 229);
    }

    th[scope='expenses-row'] {
        background-color: rgb(251, 180, 192);
    }

    th[scope='savings-row'] {
        background-color: rgb(135, 189, 228);
    }

    td[scope='income-col'] {
        background-color: rgb(187, 171, 229);
    }

    td[scope='expenses-col'] {
        background-color: rgb(251, 180, 192);
    }

    td[scope='savings-col'] {
        background-color: rgb(187, 225, 253);
    }

    input {
        text-align: center;
        padding: 3px;
        width: 100%;
    }

    .container-1,
    .container-2,
    .container-3 {
        display: flex;
    }

    .container-1 {
        margin-top: 1cm;
        margin-bottom: 1cm;
    }

    .container-2 {
        margin-bottom: 1cm;
    }

    .container-3 {
        margin-bottom: 1cm;
    }

    table {
        border-collapse: collapse;
        border: 2px solid rgb(200, 200, 200);
        letter-spacing: 1px;
        font-family: sans-serif;
        font-size: 0.8rem;
    }
</style>

<header>
    <p>
    <div class="incline-block">
        <div class="d-flex" style="max-width:100px;">
            <MudDatePicker Label="Budget Year" @bind-Date="selectedPeriod" MinDate="@datePicker.MinimalPeriodInterval"
                MaxDate="@datePicker.MaximumPeriodInteval" PickerClosed="@GetDataByMonthIdAsync" />
        </div>
    </div>
    </p>
</header>
<MudButton @onclick="OpenSubmitYearDialog" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Add Year
</MudButton>
<MudButton @onclick="OpenDeleteYearDialog" Variant="Variant.Filled" Color="MudBlazor.Color.Error">Delete Year
</MudButton>

<div class="container-1">
    <table>
        <tr>
            <th scope="income-row">Income</th>
            @foreach (var month in Income)
            {
                <th scope="income-row">@month.Name</th>
            }
        </tr>
        <tr>
            <td scope="income-col">Employment</td>
            @foreach (var category in Income)
            {
                <td scope="income-col"><input type="number" value="@category.Income.Employment"
                    @onchange="@(e => EditIncome(e, category.Income, "Employment"))"></td>
            }
        </tr>
        <tr>
            <td scope="income-col">SideHustle</td>
            @foreach (var category in Income)
            {
                <td scope="income-col"><input type="number" value="@category.Income.SideHustle"
                    @onchange="@(e => EditIncome(e, category.Income, "SideHustle"))"></td>
            }
        </tr>
        <tr>
            <td scope="income-col">Dividends</td>
            @foreach (var category in Income)
            {
                <td scope="income-col"><input type="number" value="@category.Income.Dividends"
                    @onchange="@(e => EditIncome(e, category.Income, "Dividends"))"></td>
            }
        </tr>
    </table>
    <div>
        <MudButton Variant="Variant.Filled" @onclick=@AddIncome>Add</MudButton>
        <MudButton Variant="Variant.Filled" @onclick="@RemoveIncome">Rem</MudButton>
    </div>
</div>

<div class="container-2">
    <table>
        <tr>
            <th scope="savings-row">Savings</th>
            @foreach (var month in Savings)
            {
                <th scope="savings-row">@month.Name</th>
            }
        </tr>
        <tr>
            <td scope="savings-col">EmergencyFund</td>
            @foreach (var category in Savings)
            {
                <td scope="savings-col"><input type="number" value="@category.Savings.EmergencyFund"
                    @onchange="@(e => EditSavings(e, category.Savings, "EmergencyFund"))"></td>
            }
        </tr>
        <tr>
            <td scope="savings-col">RetirementAccount</td>
            @foreach (var category in Savings)
            {
                <td scope="savings-col"><input type="number" value="@category.Savings.RetirementAccount"
                    @onchange="@(e => EditSavings(e, category.Savings, "RetirementAccount"))"></td>
            }
        </tr>
        <tr>
            <td scope="savings-col">Vacation</td>
            @foreach (var category in Savings)
            {
                <td scope="savings-col"><input type="number" value="@category.Savings.Vacation"
                    @onchange="@(e => EditSavings(e, category.Savings, "Vacation"))"></td>
            }
        </tr>
        <tr>
            <td scope="savings-col">HealthNeeds</td>
            @foreach (var category in Savings)
            {
                <td scope="savings-col"><input type="number" value="@category.Savings.HealthNeeds"
                    @onchange="@(e => EditSavings(e, category.Savings, "HealthNeeds"))"></td>
            }
        </tr>
    </table>
    <div>
        <MudButton Variant="Variant.Filled" @onclick=@AddSavings>Add</MudButton>
        <MudButton Variant="Variant.Filled" @onclick="@RemoveSavings">Rem</MudButton>
    </div>
</div>

<div class="container-3">
    <table>
        <tr>
            <th scope="expenses-row">Expenses</th>
            @foreach (var month in Expenses)
            {
                <th scope="expenses-row">@month.Name</th>
            }
        </tr>
        <tr>
            <td scope="expenses-col">Housing</td>
            @foreach (var category in Expenses)
            {
                <td scope="expenses-col"><input type="number" value="@category.Expenses.Housing"
                    @onchange="@(e => EditExpenses(e, category.Expenses, "HealthNeeds"))"></td>
            }
        </tr>
        <tr>
            <td scope="expenses-col">Groceries</td>
            @foreach (var category in Expenses)
            {
                <td scope="expenses-col"><input type="number" value="@category.Expenses.Groceries"
                    @onchange="@(e => EditExpenses(e, category.Expenses, "Groceries"))"></td>
            }
        </tr>
        <tr>
            <td scope="expenses-col">Utilities</td>
            @foreach (var category in Expenses)
            {
                <td scope="expenses-col"><input type="number" value="@category.Expenses.Utilities"
                    @onchange="@(e => EditExpenses(e, category.Expenses, "Utilities"))"></td>
            }
        </tr>
        <tr>
            <td scope="expenses-col">Vacation</td>
            @foreach (var category in Expenses)
            {
                <td scope="expenses-col"><input type="number" value="@category.Expenses.Vacation"
                    @onchange="@(e => EditExpenses(e, category.Expenses, "Vacation"))"></td>
            }
        </tr>
        <tr>
            <td scope="expenses-col">Transportation</td>
            @foreach (var category in Expenses)
            {
                <td scope="expenses-col"><input type="number" value="@category.Expenses.Transportation"
                    @onchange="@(e => EditExpenses(e, category.Expenses, "Transportation"))"></td>
            }
        </tr>
        <tr>
            <td scope="expenses-col">Medicine</td>
            @foreach (var category in Expenses)
            {
                <td scope="expenses-col"><input type="number" value="@category.Expenses.Medicine"
                    @onchange="@(e => EditExpenses(e, category.Expenses, "Medicine"))"></td>
            }
        </tr>
        <tr>
            <td scope="expenses-col">Clothing</td>
            @foreach (var category in Expenses)
            {
                <td scope="expenses-col"><input type="number" value="@category.Expenses.Clothing"
                    @onchange="@(e => EditExpenses(e, category.Expenses, "Clothing"))"></td>
            }
        </tr>
        <tr>
            <td scope="expenses-col">Media</td>
            @foreach (var category in Expenses)
            {
                <td scope="expenses-col"><input type="number" value="@category.Expenses.Media"
                    @onchange="@(e => EditExpenses(e, category.Expenses, "Media"))"></td>
            }
        </tr>
        <tr>
            <td scope="expenses-col">Insuranses</td>
            @foreach (var category in Expenses)
            {
                <td scope="expenses-col"><input type="number" value="@category.Expenses.Insuranses"
                    @onchange="@(e => EditExpenses(e, category.Expenses, "Insuranses"))"></td>
            }
        </tr>
    </table>
    <div>
        <MudButton Variant="Variant.Filled" @onclick=@AddExpenses>Add</MudButton>
        <MudButton Variant="Variant.Filled" @onclick="@RemoveExpenses">Rem</MudButton>
    </div>
</div>

@code {
    private decimal selected;
    private int yearId;
    private IEnumerable<YearModel> Years = new List<YearModel>();
    private IEnumerable<BudgetModel> Months = new List<BudgetModel>();
    private IEnumerable<BudgetModel> Income = new List<BudgetModel>();
    private IEnumerable<BudgetModel> Savings = new List<BudgetModel>();
    private IEnumerable<BudgetModel> Expenses = new List<BudgetModel>();
    private DateTime? selectedPeriod = DateTime.Now;
    private List<string> messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        Years = await yearApiClient.GetYearsAsync();
        Months = await monthsApiClient.GetMonthsAsync();
        Income = await incomeApiClient.GetIncomeByEachMonthAsync();
        Savings = await savingsApiClient.GetSavingByEachMonthAsync();
        Expenses = await expensesApiClient.GetExpensesByEachMonthAsync();
        datePicker.SetMinAndMaxYearPeriodForCalendar(Years);
        yearId = Years.Select(year => year.Id).LastOrDefault();
        MessageService.OnMessage += MessageHandler;
    }
    public void Dispose()
    {
        MessageService.OnMessage -= MessageHandler;
    }

    private async void MessageHandler(string message)
    {
        if (message != null)
            messages.Add(message);
        else
            messages.Clear();
        StateHasChanged();
        if (message!.Equals("YearPosted") || message.Equals("yearDeleted"))
        {
            Years = await yearApiClient.GetYearsAsync();
        }
    }

    public async Task GetDataByMonthIdAsync()
    {
        yearId = datePicker.FindYearId(selectedPeriod, Years, Months);
        await GetExpensesByYearIdAsync(yearId);
        await GetIncomeByYearIdAsync(yearId);
        await GetSavingsByYearIdAsync(yearId);
    }

    public async Task GetSavingsByYearIdAsync(int yearId)
    {
        Savings = await savingsApiClient.GetSavingsByYearId(yearId);
        StateHasChanged();
    }
    public async Task GetIncomeByYearIdAsync(int yearId)
    {
        Income = await incomeApiClient.GetIncomeByYearId(yearId);
        StateHasChanged();
    }
    public async Task GetExpensesByYearIdAsync(int yearId)
    {
        Expenses = await expensesApiClient.GetExpensesByYearId(yearId);
        StateHasChanged();
    }

    public async Task EditIncome(ChangeEventArgs e, IncomeModel model, string propertyName)
    {
        string value = e.Value.ToString();
        decimal selectedValue;
        Decimal.TryParse(value, out selectedValue);

        foreach (var category in model.GetType().GetProperties())
        {
            if (category.Name.Equals(propertyName))
            {
                category.SetValue(model, selectedValue);
            }
        }

        await incomeApiClient.UpdateIncomeAsync(model);
        Income = await incomeApiClient.GetIncomeByEachMonthAsync();
    }

    public async Task EditSavings(ChangeEventArgs e, SavingsModel model, string propertyName)
    {
        string value = e.Value.ToString();
        decimal selectedValue;
        Decimal.TryParse(value, out selectedValue);

        foreach (var category in model.GetType().GetProperties())
        {
            if (category.Name.Equals(propertyName))
            {
                category.SetValue(model, selectedValue);
            }
        }

        await savingsApiClient.UpdateSavingsAsync(model);
        Savings = await savingsApiClient.GetSavingByEachMonthAsync();
    }

    public async Task EditExpenses(ChangeEventArgs e, ExpensesModel model, string propertyName)
    {
        string value = e.Value.ToString();
        decimal selectedValue;
        Decimal.TryParse(value, out selectedValue);

        foreach (var category in model.GetType().GetProperties())
        {
            if (category.Name.Equals(propertyName))
            {
                category.SetValue(model, selectedValue);
            }
        }

        await expensesApiClient.UpdateExpensesAsync(model);
        Expenses = await expensesApiClient.GetExpensesByEachMonthAsync();
    }

    public async Task AddIncome()
    {
        int monthId = Months.Where(m => m.YearId == yearId && m.IncomeId == 0).Select(m => m.Id).FirstOrDefault();
        IncomeModel IncomeModel = new IncomeModel
            {
                YearId = yearId,
                MonthId = monthId
            };
        await incomeApiClient.PostIncomeAsync(IncomeModel);
        Income = await incomeApiClient.GetIncomeByEachMonthAsync();
        await UpdateMonthOnIncomePostAsync();
    }

    public async Task AddSavings()
    {
        int monthId = Months.Where(m => m.YearId == yearId && m.SavingsId == 0).Select(m => m.Id).FirstOrDefault();
        SavingsModel SavingsModel = new SavingsModel
            {
                YearId = yearId,
                MonthId = monthId
            };
        await savingsApiClient.PostSavingsAsync(SavingsModel);
        Savings = await savingsApiClient.GetSavingByEachMonthAsync();
        await UpdateMonthOnSavingsPostAsync();
    }

    public async Task AddExpenses()
    {
        int monthId = Months.Where(m => m.YearId == yearId && m.ExpensesId == 0).Select(m => m.Id).FirstOrDefault();
        ExpensesModel ExpensesModel = new ExpensesModel
            {
                YearId = yearId,
                MonthId = monthId
            };
        await expensesApiClient.PostExpensesAsync(ExpensesModel);
        Expenses = await expensesApiClient.GetExpensesByEachMonthAsync();
        await UpdateMonthOnExpensesPostAsync();
    }

    public async Task RemoveIncome()
    {
        List<IncomeModel> income = await incomeApiClient.GetIncomeAsync();
        int incomeId = income.Select(income => income.Id).LastOrDefault();
        await incomeApiClient.DeleteIncomeByIdAsync(incomeId);
        Income = await incomeApiClient.GetIncomeByEachMonthAsync();
        Months = await monthsApiClient.GetMonthsAsync();
        StateHasChanged();
    }
    public async Task RemoveSavings()
    {
        List<SavingsModel> savings = await savingsApiClient.GetSavingsAsync();
        int savingsId = savings.Select(savings => savings.Id).LastOrDefault();
        await savingsApiClient.DeleteSavingsByIdAsync(savingsId);
        Savings = await savingsApiClient.GetSavingByEachMonthAsync();
        Months = await monthsApiClient.GetMonthsAsync();
        StateHasChanged();
    }
    public async Task RemoveExpenses()
    {
        List<ExpensesModel> expenses = await expensesApiClient.GetExpensesAsync();
        int expensesId = expenses.Select(expenses => expenses.Id).LastOrDefault();
        await expensesApiClient.DeleteExpensesByIdAsync(expensesId);
        Expenses = await expensesApiClient.GetExpensesByEachMonthAsync();
        Months = await monthsApiClient.GetMonthsAsync();
        StateHasChanged();
    }

    public async Task UpdateMonthOnIncomePostAsync()
    {
        BudgetModel? month = Months.Where(m => m.YearId == yearId && m.IncomeId == 0).Select(m => m).FirstOrDefault();
        List<IncomeModel> income = await incomeApiClient.GetIncomeAsync();

        month!.IncomeId = income!.Where(income => income.MonthId == month.Id && income.YearId ==
        yearId).Select(income => income.Id).FirstOrDefault();

        await monthsApiClient.UpdateMonthAsync(month);
        Income = await incomeApiClient.GetIncomeByEachMonthAsync();
        Months = await monthsApiClient.GetMonthsAsync();
    }
    public async Task UpdateMonthOnSavingsPostAsync()
    {
        BudgetModel? month = Months.Where(m => m.YearId == yearId && m.SavingsId == 0).Select(m => m).FirstOrDefault();
        List<SavingsModel> savings = await savingsApiClient.GetSavingsAsync();

        month!.SavingsId = savings!.Where(savings => savings.MonthId == month.Id && savings.YearId ==
        yearId).Select(savings => savings.Id).FirstOrDefault();

        await monthsApiClient.UpdateMonthAsync(month);
        Savings = await savingsApiClient.GetSavingByEachMonthAsync();
        Months = await monthsApiClient.GetMonthsAsync();
    }
    public async Task UpdateMonthOnExpensesPostAsync()
    {
        BudgetModel? month = Months.Where(m => m.YearId == yearId && m.ExpensesId == 0).Select(m => m).FirstOrDefault();
        List<ExpensesModel> expenses = await expensesApiClient.GetExpensesAsync();

        month!.ExpensesId = expenses!.Where(expenses => expenses.MonthId == month.Id && expenses.YearId ==
        yearId).Select(expenses => expenses.Id).FirstOrDefault();

        await monthsApiClient.UpdateMonthAsync(month);
        Expenses = await expensesApiClient.GetExpensesByEachMonthAsync();
        Months = await monthsApiClient.GetMonthsAsync();
    }
    private void OpenSubmitYearDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions()
            {
                CloseOnEscapeKey = true
            };
        DialogService.Show<YearSubmitForm>("Add Year", closeOnEscapeKey);
    }

    private void OpenDeleteYearDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions()
            {
                CloseOnEscapeKey = true
            };
        DialogService.Show<YearDeleteForm>(@"This action will delete complete year budget plan", closeOnEscapeKey);
    }
}
