@namespace Client.Pages

@page "/budgetPlanning"
@using Client.Components
@inject Client.Services.YearApiClient yearApiClient
@inject Client.Services.BudgetApiClient budgetApiClient
@inject Client.Services.IncomeApiClient incomeApiClient
@inject Client.Services.SavingsApiClient savingsApiClient
@inject Client.Services.ExpensesApiClient expensesApiClient

@inject Client.Services.DatePicker datePicker

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager UriHelper
@inject IMessageService MessageService


<style>
    td {
        text-align: center;
        border: 1px solid rgb(190, 190, 190);
    }

    th {
        text-align: center;
        border: 1px solid rgb(190, 190, 190);
        padding: 3px;
    }

    th[scope='income-row'] {
        background-color: rgba(187, 171, 229);
    }

    th[scope='expenses-row'] {
        background-color: rgb(251, 180, 192);
    }

    th[scope='savings-row'] {
        background-color: rgb(135, 189, 228);
    }

    td[scope='income-col'] {
        background-color: rgb(187, 171, 229);
    }

    td[scope='expenses-col'] {
        background-color: rgb(251, 180, 192);
    }

    td[scope='savings-col'] {
        background-color: rgb(187, 225, 253);
    }

    input {
        text-align: center;
        padding: 3px;
        width: 100%;
    }

    .container-1,
    .container-2,
    .container-3 {
        display: flex;
    }

    .container-1 {
        margin-top: 1cm;
        margin-bottom: 1cm;
    }

    .container-2 {
        margin-bottom: 1cm;
    }

    .container-3 {
        margin-bottom: 1cm;
    }

    table {
        border-collapse: collapse;
        border: 2px solid rgb(200, 200, 200);
        letter-spacing: 1px;
        font-family: sans-serif;
        font-size: 0.8rem;
    }
</style>

<header>
    <p>
    <div class="incline-block">
        <div class="d-flex" style="max-width:100px;">
            <MudDatePicker Label="Budget Year" @bind-Date="_selectedPeriod" MinDate="@datePicker.MinPeriodInterval"
                MaxDate="@datePicker.MaxPeriodInteval" PickerClosed="@GetDataByYearIdAsync" />
        </div>
    </div>
    </p>
</header>
<MudButton @onclick="OpenSubmitYearDialog" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Add Year
</MudButton>
<MudButton @onclick="OpenDeleteYearDialog" Variant="Variant.Filled" Color="MudBlazor.Color.Error">Delete Year
</MudButton>

<div class="container-1">
    <table>
        <tr>
            <th scope="income-row">Income</th>
            @foreach (var month in _income!)
            {
                <th scope="income-row">@month.Name</th>
            }
        </tr>
        <tr>
            <td scope="income-col">Employment</td>
            @foreach (var category in _income)
            {
                <td scope="income-col"><input type="number" value="@category!.Income!.Employment"
                    @onchange="@(e => EditIncomeAsync(e, category.Income, "Employment"))"></td>
            }
        </tr>
        <tr>
            <td scope="income-col">SideHustle</td>
            @foreach (var category in _income)
            {
                <td scope="income-col"><input type="number" value="@category!.Income!.SideHustle"
                    @onchange="@(e => EditIncomeAsync(e, category.Income, "SideHustle"))"></td>
            }
        </tr>
        <tr>
            <td scope="income-col">Dividends</td>
            @foreach (var category in _income)
            {
                <td scope="income-col"><input type="number" value="@category!.Income!.Dividends"
                    @onchange="@(e => EditIncomeAsync(e, category.Income, "Dividends"))"></td>
            }
        </tr>
    </table>
    <div>
        <MudButton Variant="Variant.Filled" @onclick=@AddIncome>Add</MudButton>
        <MudButton Variant="Variant.Filled" @onclick="@RemoveIncomeAsync">Rem</MudButton>
    </div>
</div>

<div class="container-2">
    <table>
        <tr>
            <th scope="savings-row">Savings</th>
            @foreach (var month in _savings!)
            {
                <th scope="savings-row">@month.Name</th>
            }
        </tr>
        <tr>
            <td scope="savings-col">EmergencyFund</td>
            @foreach (var category in _savings)
            {
                <td scope="savings-col"><input type="number" value="@category!.Savings!.EmergencyFund"
                    @onchange="@(e => EditSavingsAsync(e, category.Savings, "EmergencyFund"))"></td>
            }
        </tr>
        <tr>
            <td scope="savings-col">RetirementAccount</td>
            @foreach (var category in _savings)
            {
                <td scope="savings-col"><input type="number" value="@category!.Savings!.RetirementAccount"
                    @onchange="@(e => EditSavingsAsync(e, category.Savings, "RetirementAccount"))"></td>
            }
        </tr>
        <tr>
            <td scope="savings-col">Vacation</td>
            @foreach (var category in _savings)
            {
                <td scope="savings-col"><input type="number" value="@category!.Savings!.Vacation"
                    @onchange="@(e => EditSavingsAsync(e, category.Savings, "Vacation"))"></td>
            }
        </tr>
        <tr>
            <td scope="savings-col">HealthNeeds</td>
            @foreach (var category in _savings)
            {
                <td scope="savings-col"><input type="number" value="@category!.Savings!.HealthNeeds"
                    @onchange="@(e => EditSavingsAsync(e, category.Savings, "HealthNeeds"))"></td>
            }
        </tr>
    </table>
    <div>
        <MudButton Variant="Variant.Filled" @onclick=@AddSavings>Add</MudButton>
        <MudButton Variant="Variant.Filled" @onclick="@RemoveSavingsAsync">Rem</MudButton>
    </div>
</div>

<div class="container-3">
    <table>
        <tr>
            <th scope="expenses-row">Expenses</th>
            @foreach (var month in _expenses!)
            {
                <th scope="expenses-row">@month.Name</th>
            }
        </tr>
        <tr>
            <td scope="expenses-col">Housing</td>
            @foreach (var category in _expenses)
            {
                <td scope="expenses-col"><input type="number" value="@category!.Expenses!.Housing"
                    @onchange="@(e => EditExpensesAsync(e, category.Expenses, "Housing"))"></td>
            }
        </tr>
        <tr>
            <td scope="expenses-col">Groceries</td>
            @foreach (var category in _expenses)
            {
                <td scope="expenses-col"><input type="number" value="@category!.Expenses!.Groceries"
                    @onchange="@(e => EditExpensesAsync(e, category.Expenses, "Groceries"))"></td>
            }
        </tr>
        <tr>
            <td scope="expenses-col">Utilities</td>
            @foreach (var category in _expenses)
            {
                <td scope="expenses-col"><input type="number" value="@category!.Expenses!.Utilities"
                    @onchange="@(e => EditExpensesAsync(e, category.Expenses, "Utilities"))"></td>
            }
        </tr>
        <tr>
            <td scope="expenses-col">Vacation</td>
            @foreach (var category in _expenses)
            {
                <td scope="expenses-col"><input type="number" value="@category!.Expenses!.Vacation"
                    @onchange="@(e => EditExpensesAsync(e, category.Expenses, "Vacation"))"></td>
            }
        </tr>
        <tr>
            <td scope="expenses-col">Transportation</td>
            @foreach (var category in _expenses)
            {
                <td scope="expenses-col"><input type="number" value="@category!.Expenses!.Transportation"
                    @onchange="@(e => EditExpensesAsync(e, category.Expenses, "Transportation"))"></td>
            }
        </tr>
        <tr>
            <td scope="expenses-col">Medicine</td>
            @foreach (var category in _expenses)
            {
                <td scope="expenses-col"><input type="number" value="@category!.Expenses!.Medicine"
                    @onchange="@(e => EditExpensesAsync(e, category.Expenses, "Medicine"))"></td>
            }
        </tr>
        <tr>
            <td scope="expenses-col">Clothing</td>
            @foreach (var category in _expenses)
            {
                <td scope="expenses-col"><input type="number" value="@category!.Expenses!.Clothing"
                    @onchange="@(e => EditExpensesAsync(e, category.Expenses, "Clothing"))"></td>
            }
        </tr>
        <tr>
            <td scope="expenses-col">Media</td>
            @foreach (var category in _expenses)
            {
                <td scope="expenses-col"><input type="number" value="@category!.Expenses!.Media"
                    @onchange="@(e => EditExpensesAsync(e, category.Expenses, "Media"))"></td>
            }
        </tr>
        <tr>
            <td scope="expenses-col">Insuranses</td>
            @foreach (var category in _expenses)
            {
                <td scope="expenses-col"><input type="number" value="@category!.Expenses!.Insuranses"
                    @onchange="@(e => EditExpensesAsync(e, category.Expenses, "Insuranses"))"></td>
            }
        </tr>
    </table>
    <div>
        <MudButton Variant="Variant.Filled" @onclick=@AddExpenses>Add</MudButton>
        <MudButton Variant="Variant.Filled" @onclick="@RemoveExpensesAsync">Rem</MudButton>
    </div>
</div>

@code {
    private int _yearId = 0;
    private IEnumerable<YearModel>? _years = new List<YearModel>();
    private IEnumerable<BudgetModel>? _months = new List<BudgetModel>();
    private IEnumerable<BudgetModel>? _income = new List<BudgetModel>();
    private IEnumerable<BudgetModel>? _savings = new List<BudgetModel>();
    private IEnumerable<BudgetModel>? _expenses = new List<BudgetModel>();
    private DateTime? _selectedPeriod = DateTime.Now;
    private List<string?> _messages = new List<string?>();

    protected override async Task OnInitializedAsync()
    {
        _years = await yearApiClient.GetYearsAsync();
        _months = await budgetApiClient.GetMonthsAsync();
        _income = await budgetApiClient.GetIncomeAsync();
        _savings = await budgetApiClient.GetSavingAsync();
        _expenses = await budgetApiClient.GetExpensesAsync();
        _yearId = _years!.Select(year => year.Id).LastOrDefault();
        datePicker.SetMinAndMaxYearPeriodForCalendar(_years!);
        MessageService.OnMessage += MessageHandler!;
    }

    public void Dispose()
    {
        MessageService.OnMessage -= MessageHandler!;
    }

    private async void MessageHandler(string message)
    {
        if (message != null)
            _messages.Add(message);
        else
            _messages.Clear();
        StateHasChanged();
        if (message!.Equals("YearPosted") || message.Equals("yearDeleted"))
        {
            _years = await yearApiClient.GetYearsAsync();
        }
    }

    public async Task GetDataByYearIdAsync()
    {
        _yearId = datePicker.GetYearId(_selectedPeriod, _years!, _months!);
        await GetExpensesByYearIdAsync(_yearId);
        await GetIncomeByYearIdAsync(_yearId);
        await GetSavingsByYearIdAsync(_yearId);
    }

    public async Task GetSavingsByYearIdAsync(int yearId)
    {
        _savings = await budgetApiClient.GetSavingsByYearIdAsync(yearId);
        StateHasChanged();
    }

    public async Task GetIncomeByYearIdAsync(int yearId)
    {
        _income = await budgetApiClient.GetIncomeByYearIdAsync(yearId);
        StateHasChanged();
    }

    public async Task GetExpensesByYearIdAsync(int yearId)
    {
        _expenses = await budgetApiClient.GetExpensesByYearIdAsync(yearId);
        StateHasChanged();
    }

    public async Task EditIncomeAsync(ChangeEventArgs e, IncomeModel model, string propertyName)
    {
        var incomeModel = SetValueOnEdit(e, model, propertyName);
        await incomeApiClient.UpdateAsync(incomeModel);
        _income = await budgetApiClient.GetIncomeAsync();
    }

    public async Task EditSavingsAsync(ChangeEventArgs e, SavingsModel model, string propertyName)
    {
        var savingsModel = SetValueOnEdit(e, model, propertyName);
        await savingsApiClient.UpdateAsync(savingsModel);
        _savings = await budgetApiClient.GetSavingAsync();
    }

    public async Task EditExpensesAsync(ChangeEventArgs e, ExpensesModel model, string propertyName)
    {
        var expensesModel = SetValueOnEdit(e, model, propertyName);
        await expensesApiClient.UpdateAsync(model);
        _expenses = await budgetApiClient.GetExpensesAsync();
    }

    public T SetValueOnEdit<T>(ChangeEventArgs e, T model, string propertyName)
    {
        string? value = e?.Value?.ToString();
        decimal selectedValue;
        Decimal.TryParse(value, out selectedValue);

        foreach (var category in model!.GetType().GetProperties())
        {
            if (category.Name.Equals(propertyName))
            {
                category.SetValue(model, selectedValue);
            }
        }
        return model;
    }

    public async Task AddIncome()
    {
        if (IncomeYearBudgetPlanComplete())
            return;
 
        IncomeModel IncomeModel = new IncomeModel
        {
            YearId = _yearId,
            MonthId = _months!
                            .Where(m => m.YearId == _yearId && m.IncomeId == 0)
                            .Select(m => m.Id)
                            .FirstOrDefault()
        };

        await incomeApiClient.AddAsync(IncomeModel);
        _income = await budgetApiClient.GetIncomeAsync();
        await UpdateMonthOnIncomePostAsync();
    }

    public async Task AddSavings()
    {
        if (SavingsYearBudgetPlanComplete())
            return;

        SavingsModel SavingsModel = new SavingsModel
        {
            YearId = _yearId,
            MonthId = _months!
                        .Where(m => m.YearId == _yearId && m.SavingsId == 0)
                        .Select(m => m.Id)
                        .FirstOrDefault()
        };

        await savingsApiClient.AddAsync(SavingsModel);
        _savings = await budgetApiClient.GetSavingAsync();
        await UpdateMonthOnSavingsPostAsync();
    }

    public async Task AddExpenses()
    {
        if (ExpensesYearBudgetPlanComplete()) 
            return;

        ExpensesModel ExpensesModel = new ExpensesModel
        {
            YearId = _yearId,
            MonthId = _months!
                        .Where(m => m.YearId == _yearId && m.ExpensesId == 0)
                        .Select(m => m.Id)
                        .FirstOrDefault()
        };

        await expensesApiClient.AddAsync(ExpensesModel);
        _expenses = await budgetApiClient.GetExpensesAsync();
        await UpdateMonthOnExpensesPostAsync();
    }

    public bool ExpensesYearBudgetPlanComplete()
    {
        return _months!
                    .Where(m => m.Name!.Contains("December"))
                    .Select(m => m.ExpensesId != 0)
                    .First();
    }
    public bool IncomeYearBudgetPlanComplete()
    {
        return _months!
                    .Where(m => m.Name!.Contains("December"))
                    .Select(m => m.IncomeId != 0)
                    .First();
    }
    public bool SavingsYearBudgetPlanComplete()
    {
        return _months!
                    .Where(m => m.Name!.Contains("December"))
                    .Select(m => m.SavingsId != 0)
                    .First();
    }

    public async Task RemoveIncomeAsync()
    {
        List<IncomeModel>? incomeModel = await incomeApiClient.GetAsync();
        
        int incomeId = incomeModel!
                            .Select(income => income.Id)
                            .LastOrDefault();

        await incomeApiClient.DeleteAsync(incomeId);
        _income = await budgetApiClient.GetIncomeAsync();
        _months = await budgetApiClient.GetMonthsAsync();
        StateHasChanged();
    }

    public async Task RemoveSavingsAsync()
    {
        List<SavingsModel>? savingsModel = await savingsApiClient.GetAsync();

        int savingsId = savingsModel!
                            .Select(savings => savings.Id)
                            .LastOrDefault();

        await savingsApiClient.DeleteAsync(savingsId);
        _savings = await budgetApiClient.GetSavingAsync();
        _months = await budgetApiClient.GetMonthsAsync();
        StateHasChanged();
    }
    
    public async Task RemoveExpensesAsync()
    {
        List<ExpensesModel>? expensesModel = await expensesApiClient.GetAsync();

        int expensesId = expensesModel!
                            .Select(expenses => expenses.Id)
                            .LastOrDefault();

        await expensesApiClient.DeleteAsync(expensesId);
        _expenses = await budgetApiClient.GetExpensesAsync();
        _months = await budgetApiClient.GetMonthsAsync();
        StateHasChanged();
    }

    public async Task UpdateMonthOnIncomePostAsync()
    {
        BudgetModel? month = _months!
                                .Where(month => month.YearId == _yearId && month.IncomeId == 0)
                                .Select(month => month)
                                .FirstOrDefault();

        List<IncomeModel>? incomeModel = await incomeApiClient.GetAsync();

        month!.IncomeId = incomeModel!
                            .Where(income => income.MonthId == month.Id && income.YearId == _yearId)
                            .Select(income => income.Id)
                            .FirstOrDefault();

        await budgetApiClient.UpdateMonthAsync(month);
        _income = await budgetApiClient.GetIncomeAsync();
        _months = await budgetApiClient.GetMonthsAsync();
    }

    public async Task UpdateMonthOnSavingsPostAsync()
    {
        BudgetModel? month = _months!
                                .Where(month => month.YearId == _yearId && month.SavingsId == 0)
                                .Select(month => month)
                                .FirstOrDefault();

        List<SavingsModel>? savingsModel = await savingsApiClient.GetAsync();

        month!.SavingsId = savingsModel!
                                .Where(savings => savings.MonthId == month.Id && savings.YearId == _yearId)
                                .Select(savings => savings.Id)
                                .FirstOrDefault();

        await budgetApiClient.UpdateMonthAsync(month);
        _savings = await budgetApiClient.GetSavingAsync();
        _months = await budgetApiClient.GetMonthsAsync();
    }

    public async Task UpdateMonthOnExpensesPostAsync()
    {
        BudgetModel? month = _months!
                                .Where(month => month.YearId == _yearId && month.ExpensesId == 0)
                                .Select(month => month)
                                .FirstOrDefault();

        List<ExpensesModel>? expenses = await expensesApiClient.GetAsync();

        month!.ExpensesId = expenses!
                                .Where(expenses => expenses.MonthId == month.Id && expenses.YearId ==_yearId)
                                .Select(expenses => expenses.Id)
                                .FirstOrDefault();

        await budgetApiClient.UpdateMonthAsync(month);
        _expenses = await budgetApiClient.GetExpensesAsync();
        _months = await budgetApiClient.GetMonthsAsync();
    }
    private void OpenSubmitYearDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions()
            {
                CloseOnEscapeKey = true
            };
        DialogService.Show<YearSubmitDialog>("Add Year", closeOnEscapeKey);
    }

    private void OpenDeleteYearDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions()
            {
                CloseOnEscapeKey = true
            };
        DialogService.Show<YearDeleteDialog>(@"This action will delete complete year budget plan", closeOnEscapeKey);
    }
}
