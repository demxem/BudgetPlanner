@page "/"
@inject Client.Services.IncomeApiClient incomeApiClient
@inject Client.Services.SavingsApiClient savingsApiClient
@inject Client.Services.ExpensesApiClient expensesApiClient
@inject Client.Services.YearApiClient yearsApiClient
@inject Client.Services.DateApiClient dateApiClient
@inject Client.Services.MonthsApiClient monthsApiClient
@inject Client.Services.DetailedBudgetApiClient detailedBudgetApiClient

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject Client.Services.SharedState state
@inject IMessageService MessageService

<style>
    select {
        text-align: center;
        width: 100%;
        padding: 10px;
    }

    td {
        text-align: center;
        border: 1px solid rgb(190, 190, 190);
    }

    th {
        text-align: center;
        border: 1px solid rgb(190, 190, 190);
        padding: 10px;
    }

    input {
        text-align: center;
        padding: 10px;
        width: 100%;
    }

    td {
        text-align: center;
    }
</style>
<MudGrid>
    <MudItem xs="3">
        <MudCard Outlined="true">
            <MudCardContent>
                <MudText>Date Of Today</MudText>
                <MudText Typo="Typo.body2">@DateOfToday</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudMenu Label="Plan Your Budget" Variant="Variant.Filled" Color="Color.Primary">
                    <MudMenuItem href="/budget" OnClick="OnClick">Savings</MudMenuItem>
                    <MudMenuItem href="/budget" OnClick="OnClick">Income</MudMenuItem>
                    <MudMenuItem href="/budget" OnClick="OnClick">Expenses</MudMenuItem>
                </MudMenu>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="3">
        <MudCard Outlined="true">
            <MudCardContent>
                <MudText>Date Of Last Record</MudText>
                <MudText Typo="Typo.body2">@LatestRecordDate</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="3">
        <MudCard Outlined="true">
            <MudCardContent>
                <MudText>Left To Budget</MudText>
                <MudText Typo="Typo.body2">@GetLatestTrackedUndistributedIncome()</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>
<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%">
                <div class="inline-block">
                    <MudButton @onclick="@OpenSubmitForm" Variant="Variant.Filled" Color="Color.Primary">Select Year
                    </MudButton>
                </div>
                <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@Data"
                    InputLabels="@Labels">
                    <CustomGraphics>
                        <text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle"
                            fill="blue" font-family="Helvetica" font-size="3">Income</text>
                        <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle"
                            fill="blue" font-family="Helvetica" font-size="5">@CalculateUndistributedIcome()</text>
                    </CustomGraphics>
                </MudChart>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%">
                <table>
                    <tr>
                        <th>Date</th>
                        <th>Type</th>
                        <th>Category</th>
                        <th>Details</th>
                        <th>Amount</th>
                        <th>Balance</th>
                        <th>Submit</th>
                    </tr>
                    <tr>
                        <td><input type="datetime-local" required @bind-value="@date"></td>
                        <td>
                            <select name="Type" @onchange="((ChangeEventArgs e) => itemType = e.Value.ToString())">
                                <option value="Income">Income</option>
                                <option value="Savings">Savings</option>
                                <option value="Expenses">Expenses</option>
                            </select>
                        </td>
                        <td>
                            <select name="Category"
                            @onchange="((ChangeEventArgs e) => itemCategory = e.Value.ToString())">
                                @if (itemType.Equals("Income"))
                                {
                                    <option value="Employment">Employment</option>
                                    <option value="SideHustle">SideHustle</option>
                                    <option value="Dividends">Dividends</option>
                                }
                                else if (itemType.Equals("Savings"))
                                {
                                    <option value="EmergencyFund">EmergencyFund</option>
                                    <option value="RetirementAccount">RetirementAccount</option>
                                    <option value="Vacation">Vacation</option>
                                    <option value="HealthNeeds">HealthNeeds</option>
                                }
                                else if (itemType.Equals("Expenses"))
                                {
                                    <option value="Housing">Housing</option>
                                    <option value="Groceries">Groceries</option>
                                    <option value="Utilities">Utilities</option>
                                    <option value="Vacation">Vacation</option>
                                    <option value="Transportation">Transportation</option>
                                    <option value="Medicine">Medicine</option>
                                    <option value="Clothing">Clothing</option>
                                    <option value="Media">Media</option>
                                    <option value="Insurances">Insurances</option>
                                }
                            </select>
                        </td>
                        <td><input type="text" required="true" @bind-value="@itemDetails"></td>
                        <td><input type="number" required="true" @bind-value="@itemAmount"></td>
                        <td>@itemBalance</td>
                        <td><button id="submit" @onclick="@PostBudgetAsync">Submit</button></td>
                    </tr>
                    @foreach (var item in Budget)
                    {
                        <tr>
                            <td>@item.Date</td>
                            <td>@item.Type</td>
                            <td>@item.Category</td>
                            <td>@item.Details</td>
                            <td>@item.Amount</td>
                            <td>@item.Balance</td>
                            <td><input id="remove" type="button" value="Remove" @onclick="(() => DeleteBudgetAsync(item))">
                            </td>
                        </tr>
                    }
                </table>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private double[] Data = new double[3];
    private string[] Labels = { "Income", "Savings", "Expenses" };
    private DateTime DateOfToday = DateTime.Now;
    private List<DateModel>? Dates = new List<DateModel>();
    private List<BudgetModel>? Months = new List<BudgetModel>();
    private IList<YearModel>? Years = new List<YearModel>();
    private IList<BudgetModel>? IncomeByEachMonth = new List<BudgetModel>();
    private IList<BudgetModel>? SavingsByEachMonth = new List<BudgetModel>();
    private IList<BudgetModel>? ExpensesByEachMonth = new List<BudgetModel>();
    private IList<IncomeModel>? Income = new List<IncomeModel>();
    private IList<DetailedBudgetModel>? Budget = new List<DetailedBudgetModel>();
    private BudgetModel? LatestIncome;
    private string? itemType { get; set; } = "Income";
    private string itemCategory { get; set; } = "";
    private float itemAmount { get; set; }
    private DateTime date { get; set; } = DateTime.Now;
    private string itemDetails { get; set; } = "";

    private float itemBalance { get; set; }

    private DateTime LatestRecordDate;

    private List<string> messages = new List<string>();
    private enum Action
    {
        AddTrackedCategory,
        RemoveTrackedCategory
    }

    private enum Type
    {
        Income,
        Savings,
        Expenses
    }
    protected override async Task OnInitializedAsync()
    {
        Dates = await dateApiClient.GetLatestDateAsync();
        Budget = await detailedBudgetApiClient.GetBudgetAsync();
        GetLatestRecordDate();
        Years = await yearsApiClient.GetYearsAsync();
        IncomeByEachMonth = await incomeApiClient.GetIncomeByEachMonthAsync();
        SavingsByEachMonth = await savingsApiClient.GetSavingByEachMonthAsync();
        ExpensesByEachMonth = await expensesApiClient.GetExpensesByEachMonthAsync();
        GetLatestMonthlyIncome();
        GetLatestMonthlySavings();
        GetLatestMonthlyExpenses();
        Months = await monthsApiClient.GetMonthsAsync();
        MessageService.OnMessage += MessageHandler;
    }

    private void Dispose()
    {
        MessageService.OnMessage -= MessageHandler;
    }

    private void MessageHandler(string message)
    {
        if (message != null)
            messages.Add(message);
        else
            messages.Clear();

        StateHasChanged();
        SetDataOnSelect();
    }

    private void GetLatestRecordDate() => LatestRecordDate = Dates!.Select(date =>
    date.LatestDate).FirstOrDefault();

    private void GetLatestMonthlyIncome()
    {
        LatestIncome = IncomeByEachMonth!.Select(income => income).LastOrDefault(new BudgetModel { });
        Data[0] = LatestIncome.MonthlyIncome;
    }
    private void GetLatestMonthlyExpenses()
    {
        float latestExpenses = ExpensesByEachMonth!.Where(expenses => expenses.Id == LatestIncome.Id &&
        expenses.YearId ==
        LatestIncome.YearId).Select(expenses => expenses.MonthlyExpenses).LastOrDefault(0);
        Data[2] = latestExpenses;
    }
    private void GetLatestMonthlySavings()
    {
        float latestSavings = SavingsByEachMonth!.Where(savings => savings.Id == LatestIncome.Id &&
        savings.YearId == LatestIncome.YearId).Select(savings => savings.MonthlySavings).LastOrDefault(0);
        Data[1] = latestSavings;
    }

    private double GetLatestTrackedUndistributedIncome()
    {
        double latestIncome = Data[0];
        double latestSavings = Data[1];
        double latestExpenses = Data[2];

        var remainingIncome = latestIncome - (latestExpenses + latestSavings);
        return remainingIncome;
    }

    private async Task GetBudgetAsync()
    {
        Budget = await detailedBudgetApiClient.GetBudgetAsync();
        StateHasChanged();
    }

    private void OpenSubmitForm()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        DialogService.Show<MainSelectForm>("Select Income to Track", closeOnEscapeKey);
    }

    private void SetDataOnSelect()
    {
        Data[0] = state.SelectedIncome!.MonthlyIncome;
        Data[1] = state.SelectedSavings!.MonthlySavings;
        Data[2] = state.SelectedExpenses!.MonthlyExpenses;
    }

    public string CalculateUndistributedIcome()
    {
        double latestIncome = Data[0];
        double latestSavings = Data[1];
        double latestExpenses = Data[2];

        var remainingIncome = latestIncome - (latestExpenses + latestSavings);
        double percentOfUndistributedIncome = (remainingIncome / latestIncome) * 100;

        string result = String.Format("{0:0.00}", percentOfUndistributedIncome);
        return result + "%";
    }

    private void OnClick(MouseEventArgs args) => Snackbar.Add("Redirecting");
    private void OnTouch(TouchEventArgs args) => Snackbar.Add("Redirecting");

    private async Task PostBudgetAsync()
    {
        var DetailedBudgetModel = new DetailedBudgetModel
            {
                Date = date,
                Type = itemType,
                Category = itemCategory,
                Details = itemDetails,
                Amount = (float)Math.Round(itemAmount, 2),
                MonthId = state.SelectedIncome.Income.MonthId,
                YearId = state.SelectedIncome.Income.YearId,
            };

        await detailedBudgetApiClient.InsertBudgetAsync(DetailedBudgetModel);
        await UpdateTrackedCategoryOnBudgetAdd();
        await GetBudgetAsync();
    }

    private async Task DeleteBudgetAsync(DetailedBudgetModel item)
    {
        await detailedBudgetApiClient.DeleteBudgetAsync(item.Id);
        await UpdateTrackedCategoryOnBudgetRemove(item);
        await GetBudgetAsync();
    }

    private async Task UpdateTrackedCategoryOnBudgetAdd()
    {

        if (itemType.Equals("Income"))
        {
            IncomeModel selected = (IncomeModel)SetTrackedCategoryOnBudgetAdd(Action.AddTrackedCategory).Result;
            await UpdateTrackedIncomeCategory(selected);
        }
        else if (itemType.Equals("Savings"))
        {
            SavingsModel selected = (SavingsModel)SetTrackedCategoryOnBudgetAdd(Action.AddTrackedCategory).Result;
            await UpdateTrackedSavingsCategory(selected);
        }
        else
        {
            ExpensesModel selected = (ExpensesModel)SetTrackedCategoryOnBudgetAdd(Action.AddTrackedCategory).Result;
            await UpdateTrackedExpensesCategory(selected);
        }
    }
    private async Task UpdateTrackedCategoryOnBudgetRemove(DetailedBudgetModel item)
    {
        if (item.Type.Equals("Income"))
        {
            IncomeModel selected = (IncomeModel)SetTrackedCategoryOnBudgetRemove(item).Result;
            await UpdateTrackedIncomeCategory(selected);
        }
        else if (item.Type.Equals("Savings"))
        {
            SavingsModel selected = (SavingsModel)SetTrackedCategoryOnBudgetRemove(item).Result;
            await UpdateTrackedSavingsCategory(selected);
        }
        else
        {
            ExpensesModel selected = (ExpensesModel)SetTrackedCategoryOnBudgetRemove(item).Result;
            await UpdateTrackedExpensesCategory(selected);
        }
    }

    private async Task<object> SetTrackedCategoryOnBudgetAdd(Action method)
    {
        object selected;
        string trackedCategory = $"Tracked{itemCategory}";

        if (itemType.Equals("Income"))
        {
            selected = state.SelectedIncome.Income;
        }
        else if (itemType.Equals("Savings"))
        {
            selected = state.SelectedSavings.Savings;
        }
        else
        {
            selected = state.SelectedExpenses.Expenses;
        }

        foreach (var category in selected.GetType().GetProperties())
        {
            if (category.Name.Equals(trackedCategory))
            {
                itemAmount += (float)category.GetValue(selected, null);
                category.SetValue(selected, itemAmount);
            }
        }
        return selected;
    }
    private async Task<object> SetTrackedCategoryOnBudgetRemove(DetailedBudgetModel model)
    {
        object selected;
        string trackedCategory = $"Tracked{model.Category}";
        if (model.Type.Equals("Income"))
        {
            selected = state.SelectedIncome.Income;
        }
        else if (model.Type.Equals("Savings"))
        {
            selected = state.SelectedSavings.Savings;
        }
        else
        {
            selected = state.SelectedExpenses.Expenses;
        }
        foreach (var category in selected.GetType().GetProperties())
        {
            if (category.Name.Equals(trackedCategory))
            {
                var itemAmount = (float)category.GetValue(selected, null);
                itemAmount -= model.Amount;
                category.SetValue(selected, itemAmount);
            }
        }
        return selected;
    }

    private async Task UpdateTrackedIncomeCategory(IncomeModel selected)
    {
        var IncomeModel = new IncomeModel
            {
                Id = selected.Id,
                Employment = selected.Employment,
                SideHustle = selected.SideHustle,
                Dividends = selected.Dividends,
                TrackedEmployment = selected.TrackedEmployment,
                TrackedSideHustle = selected.TrackedSideHustle,
                TrackedDividends = selected.TrackedDividends,
                Date = selected.Date,
                MonthId = selected.MonthId,
                YearId = selected.YearId
            };

        await incomeApiClient.UpdateIncomeAsync(IncomeModel);
    }
    private async Task UpdateTrackedSavingsCategory(SavingsModel selected)
    {
        var SavingsModel = new SavingsModel
            {
                Id = selected.Id,
                EmergencyFund = selected.EmergencyFund,
                RetirementAccount = selected.RetirementAccount,
                Vacation = selected.Vacation,
                HealthNeeds = selected.HealthNeeds,
                TrackedEmergencyFund = selected.TrackedEmergencyFund,
                TrackedRetirementAccount = selected.TrackedRetirementAccount,
                TrackedVacation = selected.TrackedVacation,
                TrackedHealthNeeds = selected.TrackedHealthNeeds,
                Date = selected.Date,
                MonthId = selected.MonthId,
                YearId = selected.YearId
            };
        await savingsApiClient.UpdateSavingsAsync(SavingsModel);
    }
    private async Task UpdateTrackedExpensesCategory(ExpensesModel selected)
    {
        var ExpensesModel = new ExpensesModel
            {
                Id = selected.Id,
                Housing = selected.Housing,
                Groceries = selected.Groceries,
                Utilities = selected.Utilities,
                Vacation = selected.Vacation,
                Transportation = selected.Transportation,
                Medicine = selected.Medicine,
                Clothing = selected.Clothing,
                Media = selected.Media,
                Insuranses = selected.Insuranses,
                TrackedHousing = selected.TrackedHousing,
                TrackedGroceries = selected.TrackedGroceries,
                TrackedUtilities = selected.TrackedUtilities,
                TrackedVacation = selected.TrackedVacation,
                TrackedTransportation = selected.TrackedTransportation,
                TrackedMedicine = selected.TrackedMedicine,
                TrackedClothing = selected.TrackedClothing,
                TrackedMedia = selected.TrackedMedia,
                TrackedInsuranses = selected.TrackedInsuranses,
                Date = selected.Date,
                MonthId = selected.MonthId,
                YearId = selected.YearId
            };
        await expensesApiClient.UpdateExpensesAsync(ExpensesModel);
    }
}
