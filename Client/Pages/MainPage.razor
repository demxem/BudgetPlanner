@page "/"
@inject Client.Services.ApiClient apiClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject Client.Services.SharedState state
@inject IMessageService MessageService

<MudGrid>
    <MudItem xs="3">
        <MudCard Outlined="true">
            <MudCardContent>
                <MudText>Date Of Today</MudText>
                <MudText Typo="Typo.body2">@date</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudMenu Label="Plan Your Budget" Variant="Variant.Filled" Color="Color.Primary">
                    <MudMenuItem href="/budget" OnClick="OnClick">Savings</MudMenuItem>
                    <MudMenuItem href="/budget" OnClick="OnClick">Income</MudMenuItem>
                    <MudMenuItem href="/budget" OnClick="OnClick">Expenses</MudMenuItem>
                </MudMenu>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="3">
        <MudCard Outlined="true">
            <MudCardContent>
                <MudText>Date Of Last Record</MudText>
                <MudText Typo="Typo.body2">@latestRecordDate</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>
<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="8" sm="3">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%">
                <div class="inline-block">
                    <MudButton @onclick="@OpenSubmitForm" Variant="Variant.Filled" Color="Color.Primary">Select Year
                    </MudButton>
                </div>
                <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@data"
                    InputLabels="@labels">
                    <CustomGraphics>
                        <text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle"
                            fill="blue" font-family="Helvetica" font-size="3">Income</text>
                        <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle"
                            fill="blue" font-family="Helvetica" font-size="5">@CalculateUndistributedIcome()</text>
                    </CustomGraphics>
                </MudChart>
            </MudPaper>
        </MudItem>
        <div class="incline-block">
            <MudText>Income : @data[1]</MudText>
            <MudText>Savings : @data[0]</MudText>
            <MudText>Expenses : @data[2]</MudText>
        </div>
    </MudGrid>
</MudContainer>

@code {
    public double[] data = new double[3];
    public string[] labels = { "Expenses", "Income", "Savings" };
    private DateTime date = DateTime.Now;
    private List<DateModel?> Dates = new List<DateModel?>();
    private List<MonthModel?> Months = new List<MonthModel?>();
    public IList<YearModel>? Years = new List<YearModel>();
    public IList<MonthModel>? IncomeByEachMonth = new List<MonthModel>();
    public IList<MonthModel>? SavingsByEachMonth = new List<MonthModel>();
    public IList<MonthModel>? ExpensesByEachMonth = new List<MonthModel>();
    public IList<IncomeModel>? Income = new List<IncomeModel>();

    private DateTime latestRecordDate;

    private List<string> messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        Dates = await apiClient.GetLatestDateAsync();
        GetLatestRecordDate();
        Years = await apiClient.GetYearsAsync();
        IncomeByEachMonth = await apiClient.GetIncomeByEachMonthAsync();
        SavingsByEachMonth = await apiClient.GetSavingByEachMonthAsync();
        ExpensesByEachMonth = await apiClient.GetExpensesByEachMonthAsync();
        GetLatestMonthlyIncome();
        GetLatestMonthlySavings();
        GetLatestMonthlyExpenses();
        Months = await apiClient.GetMonthsAsync();
        MessageService.OnMessage += MessageHandler;
    }

    public void Dispose()
    {
        MessageService.OnMessage -= MessageHandler;
    }

    private void MessageHandler(string message)
    {
        if (message != null)
            messages.Add(message);
        else
            messages.Clear();

        StateHasChanged();
        SetDataOnSelect();
    }

    private void GetLatestRecordDate() => latestRecordDate = Dates.Select(date => date.LatestDate).FirstOrDefault();

    private void GetLatestMonthlyExpenses()
    {
        float latestExpenses = ExpensesByEachMonth.Select(expenses => expenses.MonthlyExpenses).LastOrDefault(0);
        data[0] = latestExpenses;
    }
    private void GetLatestMonthlyIncome()
    {
        float latestIncome = IncomeByEachMonth.Select(income => income.MonthlyIncome).LastOrDefault(0);
        data[1] = latestIncome;
    }
    private void GetLatestMonthlySavings()
    {
        float latestSavings = SavingsByEachMonth.Select(savings => savings.MonthlySavings).LastOrDefault(0);
        data[2] = latestSavings;
    }

    private void OpenSubmitForm()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        DialogService.Show<MainSelectForm>("Select Income to Track", closeOnEscapeKey);
    }

    private void SetDataOnSelect()
    {
        data[0] = state.SelectedExpenses.MonthlyExpenses;
        data[1] = state.SelectedIncome.MonthlyIncome;
        data[2] = state.SelectedSavings.MonthlySavings;
    }

    public string CalculateUndistributedIcome()
    {
        double latestExpenses = data[0];
        double latestIncome = data[1];
        double latestSavings = data[2];

        var remainingIncome = latestIncome - (latestExpenses + latestSavings);
        double percentOfUndistributedIncome = (remainingIncome / latestIncome) * 100;

        string result = String.Format("{0:0.00}", percentOfUndistributedIncome);
        return result + "%";
    }

    private void OnClick(MouseEventArgs args) => Snackbar.Add("Redirecting");
    private void OnTouch(TouchEventArgs args) => Snackbar.Add("Redirecting");
}