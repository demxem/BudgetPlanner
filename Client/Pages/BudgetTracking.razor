@namespace Client.Pages

@page "/budgetTracking"
@inject Client.Services.YearApiClient yearsApiClient
@inject Client.Services.DateApiClient dateApiClient
@inject Client.Services.TrackedBudgetApiClient trackedBudgetApiClient
@inject Client.Services.IncomeApiClient incomeApiClient
@inject Client.Services.ExpensesApiClient expensesApiClient
@inject Client.Services.SavingsApiClient savingsApiClient
@inject Client.Services.BudgetApiClient budgetApiClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject Client.Services.SharedState state
@inject IMessageService MessageService
@inject DatePicker datePicker
@inject Charts chart

<style>
    td {
        text-align: center;
        border: 1px solid rgb(190, 190, 190);
        padding: 0%;
        margin: 0%;
        margin-left: 10px;
        margin-right: 10px;
    }

    th {
        text-align: center;
        border: 1px solid rgb(190, 190, 190);
        padding: 10px;
    }

    .select {
        width: 200px;
    }

    input {
        text-align: center;
        padding: 6px;
        width: 250px;
    }

    td {
        text-align: center;
    }

    th[scope='budget-header'] {
        background-color: rgb(241, 224, 200);
    }

    th[scope='main-budget-header'] {
        background-color: rgb(232, 202, 163);
    }

    table {
        border-collapse: collapse;
        border: 2px solid rgb(200, 200, 200);
        letter-spacing: 1px;
        font-family: sans-serif;
        font-size: 0.8rem;
    }

    #container {
        height: 100%;
        overflow-y: scroll;
        position: relative;
    }

    #stretcher {
        height: 100%;
    }

    #details-input {
        width: 850px;
    }

    #date-col {
        width: 200px;
    }
</style>


<MudGrid>
    <MudItem xs="1">
        <MudCard Outlined="true">
            <div class="incline-block">
                <div class="d-flex" style="max-width:100px;">
                    <MudDatePicker @bind-Date="_selectedPeriod" MinDate="@datePicker.MinPeriodInterval"
                        MaxDate="@datePicker.MaxPeriodInteval" PickerClosed="@GetDataByMonthIdAsync" />
                </div>
            </div>
        </MudCard>
    </MudItem>
    <MudItem xs="3">
        <MudCard Outlined="true">
            <MudCardContent>
                <MudText>Date Of Today</MudText>
                <MudText Typo="Typo.body2">@_dateOfToday</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudMenu Label="Plan Your Budget" Variant="Variant.Filled" Color="MudBlazor.Color.Transparent">
                    <MudMenuItem href="/budgetPlannning" OnClick="OnClick">Savings</MudMenuItem>
                    <MudMenuItem href="/budgetPlannning" OnClick="OnClick">Income</MudMenuItem>
                    <MudMenuItem href="/budgetPlannning" OnClick="OnClick">Expenses</MudMenuItem>
                </MudMenu>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="3">
        <MudCard Outlined="true">
            <MudCardContent>
                <MudText>Date Of Last Record</MudText>
                <MudText Typo="Typo.body2">@_latestRecordDate</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="3">
        <MudCard Outlined="true">
            <MudCardContent>
                <MudText>Left To Budget</MudText>
                <MudText Typo="Typo.body2">@CountLatestTrackedUndistributedIncome()</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Elevation="0" Class="pa-4" Style="height: 100%" MaxHeight="100%">
            <div id="container">
                <div id="stretcher">
                    <table>
                        <thead>
                            <tr>
                                <th scope="main-budget-header" colspan="7">Budget Tracker</th>
                            </tr>
                            <tr>
                                <th scope="budget-header">Date</th>
                                <th scope="budget-header">Type</th>
                                <th scope="budget-header">Category</th>
                                <th scope="budget-header">Details</th>
                                <th scope="budget-header">Amount</th>
                                <th scope="budget-header">Add/Rem</th>
                            </tr>
                        </thead>
                        <tr>
                            <td id="date-col">@_selectedPeriod!.Value.ToString("MMMM dd, yyyy")</td>
                            <td>
                                <select class="form-select form-select-sm" aria-label="form-select-sm example"
                                @onchange="((ChangeEventArgs e) => _itemType = e?.Value?.ToString())">
                                    <option selected>Income</option>
                                    <option value="Savings">Savings</option>
                                    <option value="Expenses">Expenses</option>
                                </select>
                            </td>
                            <td>
                                <select class="form-select form-select-sm" aria-label="form-select-sm example"
                                @onchange="((ChangeEventArgs e) => _itemCategory = e?.Value?.ToString()!)">
                                    @if (_itemType!.Equals("Income"))
                                    {
                                        <option value="Employment">Employment</option>
                                        <option value="SideHustle">SideHustle</option>
                                        <option value="Dividends">Dividends</option>
                                    }
                                    else if (_itemType.Equals("Savings"))
                                    {
                                        <option value="EmergencyFund">EmergencyFund</option>
                                        <option value="RetirementAccount">RetirementAccount</option>
                                        <option value="Vacation">Vacation</option>
                                        <option value="HealthNeeds">HealthNeeds</option>
                                    }
                                    else if (_itemType.Equals("Expenses"))
                                    {
                                        <option value="Housing">Housing</option>
                                        <option value="Groceries">Groceries</option>
                                        <option value="Utilities">Utilities</option>
                                        <option value="Vacation">Vacation</option>
                                        <option value="Transportation">Transportation</option>
                                        <option value="Medicine">Medicine</option>
                                        <option value="Clothing">Clothing</option>
                                        <option value="Media">Media</option>
                                        <option value="Insurances">Insurances</option>
                                    }
                                </select>
                            </td>
                            <td><input id="details-input" type="text" required="true" @bind-value="@_itemDetails"></td>
                            <td><input type="number" required="true" @bind-value="@_itemAmount"></td>
                            <td>
                                <MudButton Variant="Variant.Filled" Size="Size.Small" @onclick=@PostBudgetAsync>Add
                                </MudButton>
                            </td>
                        </tr>
                        @foreach (var item in _budget!)
                        {
                            <tr>
                                <td>@item!.Date.ToString("MMMM dd, yyyy")</td>
                                <td>@item.Type</td>
                                <td>@item.Category</td>
                                <td>@item.Details</td>
                                <td>@item.Amount</td>
                                <td>
                                    <MudButton Variant="Variant.Filled" Size="Size.Small" @onclick="() => DeleteBudgetAsync(item)">Rem</MudButton>
                                </td>
                            </tr>
                        }
                    </table>
                </div>
            </div>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    private DateTime? _selectedPeriod = DateTime.Now;
    private DateTime _dateOfToday = DateTime.Now;
    private List<DateModel>? _dates = new List<DateModel>();
    private List<BudgetModel>? _months = new List<BudgetModel>();
    private List<YearModel>? _years = new List<YearModel>();
    private BudgetModel? _income = new BudgetModel();
    private BudgetModel? _savings = new BudgetModel();
    private BudgetModel? _expenses = new BudgetModel();
    private IList<BudgetTrackedModel?> _budget = new List<BudgetTrackedModel?>();
    private string? _itemType { get; set; } = "Income";
    private string _itemCategory { get; set; } = "Employment";
    private decimal _itemAmount { get; set; }
    private string _itemDetails { get; set; } = "";
    private decimal _itemBalance { get; set; }

    private DateTime _latestRecordDate;

    private List<string> _messages = new List<string>();
    Client.Infrastracture.Income Income = new();
    Client.Infrastracture.Savings Savings = new();
    Client.Infrastracture.Expenses Expenses = new();

    protected override async Task OnInitializedAsync()
    {
        _dates = await dateApiClient.GetAsync();
        GetLatestRecordDate();
        _years = await yearsApiClient.GetYearsAsync();
        _months = await budgetApiClient.GetMonthsAsync();
        _income  = Income.Budget = await budgetApiClient.GetIncomeByMonthIdAsync(GetLastMonth());
        _savings = Savings.Budget = await budgetApiClient.GetSavingsByMonthIdAsync(GetLastMonth());
        _expenses = Expenses.Budget = await budgetApiClient.GetExpensesByMonthIdAsync(GetLastMonth());
        _budget = await trackedBudgetApiClient.GetByMonthIdAsync(GetLastMonth());
        datePicker.SetMinAndMaxYearPeriodForCalendar(_years!);
        datePicker.SetInterval(_selectedPeriod);
    }
    public int GetLastMonth()
    {
        int monthId = _months!
                            .Select(month => month.Id)
                            .LastOrDefault();
        return monthId;
    }
    public async Task GetDataByMonthIdAsync()
    {
        int monthId = datePicker.GetMonthId(_selectedPeriod, _years!, _months!);
        await GetIncomeByMonthIdAsync(monthId);
        await GetExpensesByMonthIdAsync(monthId);
        await GetSavingsByMonthIdAsync(monthId);
        await GetBudgetByMonthIdAsync();
        datePicker.SetInterval(_selectedPeriod);
    }

    public async Task GetSavingsByMonthIdAsync(int monthId)
    {
        _savings = Savings.Budget = await budgetApiClient.GetSavingsByMonthIdAsync(monthId);
        StateHasChanged();
    }
    public async Task GetIncomeByMonthIdAsync(int monthId)
    {
        _income = Income.Budget = await budgetApiClient.GetIncomeByMonthIdAsync(monthId);
        StateHasChanged();
    }
    public async Task GetExpensesByMonthIdAsync(int monthId)
    {
        _expenses = Expenses.Budget = await budgetApiClient.GetExpensesByMonthIdAsync(monthId);
        StateHasChanged();
    }

    private void GetLatestRecordDate()
    {
        _latestRecordDate = _dates!
                                .Select(date => date.LatestDate)
                                .FirstOrDefault();
    }

    private async Task GetBudgetByMonthIdAsync()
    {
        int monthId = datePicker.GetMonthId(_selectedPeriod, _years!, _months!);
        _budget = await trackedBudgetApiClient.GetByMonthIdAsync(monthId);
        StateHasChanged();
    }

    private async Task PostBudgetAsync()
    {
        int monthId = datePicker.GetMonthId(_selectedPeriod, _years!, _months!);
        
        var BudgetTrackedModel = new BudgetTrackedModel
            {
                Date = _selectedPeriod!.Value,
                Type = _itemType!,
                Category = _itemCategory,
                Details = _itemDetails,
                Amount = (decimal)Math.Round(_itemAmount, 2),
                MonthId = _income!.Income!.MonthId,
                YearId = _income.Income.YearId,
            };

        await trackedBudgetApiClient.AddAsync(BudgetTrackedModel);
        await UpdateTrackedCategoryOnBudgetAddAsync();
        await GetBudgetByMonthIdAsync();
    }

    private async Task DeleteBudgetAsync(BudgetTrackedModel item)
    {
        await trackedBudgetApiClient.DeleteAsync(item.Id);
        await GetIncomeByMonthIdAsync(item.MonthId);
        await GetSavingsByMonthIdAsync(item.MonthId);
        await GetExpensesByMonthIdAsync(item.MonthId);
        await UpdateTrackedCategoryOnBudgetRemoveAsync(item);
        await GetBudgetByMonthIdAsync();
    }

    private async Task UpdateTrackedCategoryOnBudgetAddAsync()
    {
        switch (_itemType)
        {
            case "Income":
                {
                    IncomeModel selected = Income.SetTrackedCategoryOnBudgetAdd(_itemCategory, _itemAmount);
                    await UpdateTrackedIncomeCategoryAsync(selected);
                    break;
                }
            case "Savings":
                {
                    SavingsModel selected = Savings.SetTrackedCategoryOnBudgetAdd(_itemCategory, _itemAmount);
                    await UpdateTrackedSavingsCategoryAsync(selected);
                    break;
                }
            case "Expenses":
                {
                    ExpensesModel selected = Expenses.SetTrackedCategoryOnBudgetAdd(_itemCategory, _itemAmount);
                    await UpdateTrackedExpensesCategoryAsync(selected);
                    break;
                }
        }
    }

    private async Task UpdateTrackedCategoryOnBudgetRemoveAsync(BudgetTrackedModel item)
    {
        switch (item.Type)
        {
            case "Income":
                {
                    IncomeModel selected = Income.SetTrackedCategoryOnBudgetRemove(item);
                    await UpdateTrackedIncomeCategoryAsync(selected);
                    break;
                }
            case "Savings":
                {
                    SavingsModel selected = Savings.SetTrackedCategoryOnBudgetRemove(item);
                    await UpdateTrackedSavingsCategoryAsync(selected);
                    break;
                }
            case "Expenses":
                {
                    ExpensesModel selected = Expenses.SetTrackedCategoryOnBudgetRemove(item);
                    await UpdateTrackedExpensesCategoryAsync(selected);
                    break;
                }
        }
    }

    private decimal CountLatestTrackedUndistributedIncome()
    {
        decimal latestIncome = _income!.MonthlyIncome;
        decimal latestSavings = _savings!.MonthlySavings;
        decimal latestExpenses = _expenses!.MonthlyExpenses;

        var remainingIncome = latestIncome - (latestExpenses + latestSavings);
        return remainingIncome;
    }

    private async Task UpdateTrackedIncomeCategoryAsync(IncomeModel selected)
    {
        var IncomeModel = new IncomeModel
            {
                Id = selected.Id,
                Employment = selected.Employment,
                SideHustle = selected.SideHustle,
                Dividends = selected.Dividends,
                TrackedEmployment = selected.TrackedEmployment,
                TrackedSideHustle = selected.TrackedSideHustle,
                TrackedDividends = selected.TrackedDividends,
                Date = selected.Date,
                MonthId = selected.MonthId,
                YearId = selected.YearId
            };

        await incomeApiClient.UpdateAsync(IncomeModel);
    }
    private async Task UpdateTrackedSavingsCategoryAsync(SavingsModel selected)
    {
        var SavingsModel = new SavingsModel
            {
                Id = selected.Id,
                EmergencyFund = selected.EmergencyFund,
                RetirementAccount = selected.RetirementAccount,
                Vacation = selected.Vacation,
                HealthNeeds = selected.HealthNeeds,
                TrackedEmergencyFund = selected.TrackedEmergencyFund,
                TrackedRetirementAccount = selected.TrackedRetirementAccount,
                TrackedVacation = selected.TrackedVacation,
                TrackedHealthNeeds = selected.TrackedHealthNeeds,
                Date = selected.Date,
                MonthId = selected.MonthId,
                YearId = selected.YearId
            };
        await savingsApiClient.UpdateAsync(SavingsModel);
    }
    private async Task UpdateTrackedExpensesCategoryAsync(ExpensesModel selected)
    {
        var ExpensesModel = new ExpensesModel
            {
                Id = selected.Id,
                Housing = selected.Housing,
                Groceries = selected.Groceries,
                Utilities = selected.Utilities,
                Vacation = selected.Vacation,
                Transportation = selected.Transportation,
                Medicine = selected.Medicine,
                Clothing = selected.Clothing,
                Media = selected.Media,
                Insuranses = selected.Insuranses,
                TrackedHousing = selected.TrackedHousing,
                TrackedGroceries = selected.TrackedGroceries,
                TrackedUtilities = selected.TrackedUtilities,
                TrackedVacation = selected.TrackedVacation,
                TrackedTransportation = selected.TrackedTransportation,
                TrackedMedicine = selected.TrackedMedicine,
                TrackedClothing = selected.TrackedClothing,
                TrackedMedia = selected.TrackedMedia,
                TrackedInsuranses = selected.TrackedInsuranses,
                Date = selected.Date,
                MonthId = selected.MonthId,
                YearId = selected.YearId
            };
        await expensesApiClient.UpdateAsync(ExpensesModel);
    }

    private void OnClick(MouseEventArgs args)
    {
        Snackbar.Add("Redirecting");
    }

    private void OnTouch(TouchEventArgs args)
    {
        Snackbar.Add("Redirecting");
    }
}