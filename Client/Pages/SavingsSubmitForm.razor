@inject Client.Services.YearApiClient yearsApiClient
@inject Client.Services.SavingsApiClient savingsApiClient
@inject Client.Services.MonthsApiClient monthsApiClient
@using Client.Models

<MudDialog>
    <DialogContent>
        <MudSelect T="YearModel" Label="Select Year" @Value="@selectedYear"
            ValueChanged="(year => SetYearOnSelect(year))" AnchorOrigin="Origin.BottomCenter">
            @foreach (var year in Years)
            {
                <MudSelectItem Value="@year">@year.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="string" Label="Months" @bind-Value="@selectedMonth" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@("January")" />
            <MudSelectItem Value="@("February")" />
            <MudSelectItem Value="@("March")" />
            <MudSelectItem Value="@("April")" />
            <MudSelectItem Value="@("May")" />
            <MudSelectItem Value="@("June")" />
            <MudSelectItem Value="@("July")" />
            <MudSelectItem Value="@("August")" />
            <MudSelectItem Value="@("September")" />
            <MudSelectItem Value="@("October")" />
            <MudSelectItem Value="@("November")" />
            <MudSelectItem Value="@("December")" />
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=" Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="SubmitAsync">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {

    private string selectedMonth = "";
    private YearModel? selectedYear;
    private int selectedYearId;

    public List<YearModel>? Years = new List<YearModel>();
    public List<BudgetModel>? Data = new List<BudgetModel>();
    public List<SavingsModel>? Savings = new List<SavingsModel>();
    public List<BudgetModel>? Months = new List<BudgetModel>();
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    protected override async void OnInitialized()
    {
        Years = await yearsApiClient.GetYearsAsync();
        Data = await savingsApiClient.GetSavingByEachMonthAsync();
        Months = await monthsApiClient.GetMonthsAsync();
    }

    async Task SubmitAsync()
    {
        if ((YearFoundIn(Data)) && !(MonthFoundIn(Data)) || (!YearFoundIn(Data)) &&
        (MonthFoundIn(Data)) || (!YearFoundIn(Data)) && !(MonthFoundIn(Data)))
        {
            await AddMonthAsync();
            await GetMonthsAsync();
            await AddSavingsAsync();
            await GetSavingsAsync();
            await UpdateMonthAsync();
        }

        if ((YearFoundIn(Data) && MonthFoundIn(Data)) && SavingsFoundIn(Data))
        {
            await AddSavingsAsync();
            await GetSavingsAsync();
            await GetMonthsAsync();
            await UpdateMonthAsync();
        }

        MudDialog?.Close(DialogResult.Ok(true));
    }
    public async Task GetSavingsAsync()
    {
        Savings = await savingsApiClient.GetSavingsAsync();
    }

    public async Task GetMonthsAsync()
    {
        Months = await monthsApiClient.GetMonthsAsync();
    }

    public async Task AddMonthAsync()
    {
        BudgetModel BudgetModel = new BudgetModel
            {
                Name = selectedMonth,
                YearId = selectedYearId
            };

        await monthsApiClient.PostMonthAsync(BudgetModel);
    }
    public async Task AddSavingsAsync()
    {
        int monthId = Months!.Where(m => m.Name == selectedMonth && m.YearId == selectedYearId).Select(m =>
        m.Id).FirstOrDefault();

        SavingsModel savingsModel = new SavingsModel
            {
                YearId = selectedYearId,
                MonthId = monthId
            };

        await savingsApiClient.PostSavingsAsync(savingsModel);
    }

    public void SetYearOnSelect(YearModel year)
    {
        selectedYearId = year.Id;
    }

    public bool YearFoundIn(List<BudgetModel>? data)
    {
        return Data!.Where(year => year.YearId == selectedYearId).Select(year => year.YearId ==
        selectedYearId).FirstOrDefault();
    }
    public bool MonthFoundIn(List<BudgetModel>? data)
    {
        return Data!.Where(month => month.YearId == selectedYearId).Select(month =>
        month!.Name!.Equals(selectedMonth)).FirstOrDefault();

    }
    public bool SavingsFoundIn(List<BudgetModel>? data)
    {
        return Data!.Where(savings => savings!.Name!.Equals(selectedMonth) && savings.YearId ==
        selectedYearId).Select(savings => savings.SavingsId == 0).FirstOrDefault();
    }

    public async Task UpdateMonthAsync()
    {
        BudgetModel? BudgetModel = Months!.Where(month => month.Name == selectedMonth && month.YearId ==
        selectedYearId).Select(month => month).FirstOrDefault();

        BudgetModel!.SavingsId = Savings!.Where(savings => savings.MonthId == BudgetModel.Id).Select(savings =>
        savings.Id).FirstOrDefault();

        await monthsApiClient.UpdateMonthAsync(BudgetModel);
    }

    public void Cancel() => MudDialog?.Cancel();
}







