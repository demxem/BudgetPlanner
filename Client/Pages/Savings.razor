@page "/Savings"
@using Client.Models
@inject Client.Services.ApiClient apiClient

@inject ISnackbar Snackbar

<style>
    #total{
        background-color: grey;
        text-align: center;
        font-style: italic;
    }
    th{
        background-color: pink;
    }
</style>
<MudTable Items="@SavingsData" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit"
    Filter="new Func<MonthModel ,bool>(FilterFunc)" @bind-SelectedItem="selectedItem" SortLabel="Sort By"
    CommitEditTooltip="Commit Edit" OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))"
    RowEditCommit="ItemHasBeenCommitted" 
    IsEditRowSwitchingBlocked="@blockSwitch" ApplyButtonPosition="@applyButtonPosition"
    EditButtonPosition="@editButtonPosition" EditTrigger="@editTrigger">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Savings</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        @if (applyButtonPosition.DisplayApplyButtonAtStart() || (editButtonPosition.DisplayEditButtonAtStart() &&
        editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
        <col style="width:50px;" />
        <col style="width:80px;" />
        <col style="width:50%;" />
        <col />
        <col />
        @if (applyButtonPosition.DisplayApplyButtonAtEnd() || (editButtonPosition.DisplayEditButtonAtEnd() &&
        editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
    </ColGroup>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<MonthModel, object>(x=>x.Id)">Nr</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<MonthModel, object>(x=>x.Name)">Month</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<MonthModel, object>(x=>x.Savings.EmergencyFund)">EmergencyFund</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<MonthModel, object>(x=>x.Savings.HealthNeeds)">
                HealthNeeds</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<MonthModel, object>(x=>x.Savings.RetirementAccount)">RetirementAccount</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<MonthModel, object>(x=>x.Savings.Vacation)">Vacation</MudTableSortLabel>
        </MudTh>
                <MudTh>
            <MudTableSortLabel SortBy="new Func<MonthModel, object>(x=>x.Savings.Date)">DateModified</MudTableSortLabel>
        </MudTh>
                <MudTh>
            <MudTableSortLabel SortBy="new Func<MonthModel, object>(x=>x.MonthlySavings)">MonthlySavings</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>

        <MudTd DataLabel="Nr">@context.Id</MudTd>
        <MudTd DataLabel="Month">@context.Name</MudTd>
        <MudTd DataLabel="EmergencyFund">@context.Savings.EmergencyFund</MudTd>
        <MudTd DataLabel="HealthNeeds">@context.Savings.HealthNeeds</MudTd>
        <MudTd DataLabel="RetirementAccount">@context.Savings.RetirementAccount</MudTd>
        <MudTd DataLabel="Vacation">@context.Savings.Vacation</MudTd>
        <MudTd DataLabel="Date">@context.Savings.Date</MudTd>
        <MudTd id ="total" DataLabel="MonthlySavings">@context.MonthlySavings</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Nr">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="EmergencyFund">
            <MudNumericField @bind-Value="@context.Savings.EmergencyFund" Required />
         </MudTd>
         <MudTd DataLabel="HealthNeeds">
             <MudNumericField @bind-Value="@context.Savings.HealthNeeds" Required />
         </MudTd>
         <MudTd DataLabel="RetirementAccount">
             <MudNumericField @bind-Value="@context.Savings.RetirementAccount" Required />
         </MudTd>
         <MudTd DataLabel="Vacation">
             <MudNumericField @bind-Value="@context.Savings.Vacation" Required />
         </MudTd>
     </RowEditingTemplate>
     <PagerContent>
         <MudTablePager />
     </PagerContent>
     <EditButtonContent Context="button">
         <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0"
             OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
     </EditButtonContent>
 </MudTable>

@code {
    private List<string> editEvents = new();
    private bool dense = true;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = true;
    private bool blockSwitch = false;
    private string searchString = "";
    private MonthModel selectedItem = null;
    private HashSet<MonthModel> selectedItems1 = new HashSet<MonthModel>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.Start;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.Start;
    private TableEditTrigger editTrigger = TableEditTrigger.EditButton;
    private IEnumerable<MonthModel> SavingsData = new List<MonthModel>();

    protected override async Task OnInitializedAsync()
    {
        SavingsData = await apiClient.GetMonthsAsync();
    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object savings)
    {
        await apiClient.AddSavingsAsync(selectedItem.Savings);
        AddEditionEvent($"RowEditCommit event: Changes to Element {((MonthModel)savings).Name} committed");
    }

    private bool FilterFunc(MonthModel savings)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (savings.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (savings.Savings.EmergencyFund.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (savings.Savings.Vacation.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (savings.Savings.HealthNeeds.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (savings.Savings.RetirementAccount.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (savings.Savings.Date.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
            if (savings.MonthlySavings.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{savings.Name} {savings.MonthlySavings.ToString()} {savings.Savings.EmergencyFund.ToString()} {savings.Savings.Vacation.ToString()} {savings.Savings.HealthNeeds.ToString()} {savings.Savings.Vacation.ToString()}".Contains(searchString))
            return true;
        return false;
    }
}











