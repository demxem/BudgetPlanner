@inject Client.Services.ApiClient apiClient
@using Client.Models
@inject IMessageService MessageService

<MudDialog>
    <DialogContent>
        <MudSelect T="YearModel" Label="Select Year" @Value="@selectedYear" ValueChanged="(year => SetSelected(year))"
            AnchorOrigin="Origin.BottomCenter">
            @foreach (var year in Years)
            {
                <MudSelectItem Value="@year">@year.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="string" Label="Months" @bind-Value="@selectedMonth" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@("January")" />
            <MudSelectItem Value="@("February")" />
            <MudSelectItem Value="@("March")" />
            <MudSelectItem Value="@("April")" />
            <MudSelectItem Value="@("May")" />
            <MudSelectItem Value="@("June")" />
            <MudSelectItem Value="@("July")" />
            <MudSelectItem Value="@("August")" />
            <MudSelectItem Value="@("September")" />
            <MudSelectItem Value="@("October")" />
            <MudSelectItem Value="@("November")" />
            <MudSelectItem Value="@("December")" />
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=" Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="SubmitAsync">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {

    private string selectedMonth = "";
    private YearModel? selectedYear;
    private string inputYear = "";
    private int selectedYearId;
    private bool isPresentYear;
    private bool isPresentMonth;
    private bool isPersentIncome;

    public IList<YearModel>? Years = new List<YearModel>();
    public IList<MonthModel>? IncomeByEachMonth = new List<MonthModel>();
    public IList<IncomeModel>? Income = new List<IncomeModel>();
    public IList<MonthModel> Months = new List<MonthModel>();
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    protected override async void OnInitialized()
    {
        Years = await apiClient.GetYearsAsync();
        IncomeByEachMonth = await apiClient.GetIncomeByEachMonthAsync();
        Months = await apiClient.GetMonthsAsync();
    }

    public async Task GetIncomeByEachMonthAsync()
    {
        IncomeByEachMonth = await apiClient.GetIncomeByEachMonthAsync();
    }

    public async Task GetIncome()
    {
        Income = await apiClient.GetIncomeAsync();
    }

    public async Task GetMonth()
    {
        Months = await apiClient.GetMonthsAsync();
    }

    public async Task AddMonth()
    {
        MonthModel monthModel = new MonthModel { Name = selectedMonth, YearId = selectedYearId };
        await apiClient.PostMonthAsync(monthModel);
    }
    public async Task AddIncome()
    {
        int monthId = Months.Where(m => m.Name == selectedMonth && m.YearId == selectedYearId).Select(m =>
        m.Id).FirstOrDefault();

        IncomeModel incomeModel = new IncomeModel { YearId = selectedYearId, MonthId = monthId };
        await apiClient.PostIncomeAsync(incomeModel);
    }

    public void SetSelected(YearModel year)
    {
        selectedYearId = year.Id;
    }

    public async Task UpdateMonth()
    {
        MonthModel monthModel = Months.Where(m => m.Name == selectedMonth && m.YearId == selectedYearId).Select(m =>
        m).FirstOrDefault();

        int IncomeId = Income.Where(i => i.MonthId == monthModel.Id).Select(i => i.Id).FirstOrDefault();
        monthModel.IncomeId = IncomeId;
        await apiClient.UpdateMonthAsync(monthModel);
    }

    async Task SubmitAsync()
    {
        isPresentYear = IncomeByEachMonth.Where(x => x.YearId == selectedYearId).Select(x => x.YearId ==
        selectedYearId).FirstOrDefault();
        isPresentMonth = IncomeByEachMonth!.Where(m => m.YearId == selectedYearId).Select(m =>
        m.Name.Equals(selectedMonth)).FirstOrDefault();
        isPersentIncome = IncomeByEachMonth!.Where(i => i.Name.Equals(selectedMonth) && i.YearId == selectedYearId).Select(i
        => i.IncomeId == 0).FirstOrDefault();

        if ((isPresentYear && !isPresentMonth) ||
        (!isPresentYear && isPresentMonth) ||
        (!isPresentYear && !isPresentMonth))
        {
            await AddMonth();
            await GetMonth();
            await AddIncome();
            await GetIncome();
            await UpdateMonth();
        }

        if ((isPresentYear && isPresentMonth) && isPersentIncome)
        {
            await AddIncome();
            await GetIncome();
            await GetMonth();
            await UpdateMonth();
        }

        MudDialog?.Close(DialogResult.Ok(true));
    }

    private void SendMessage()
    {
        MessageService.SendMessage("incomeSubmited");
    }

    private void ClearMessages()
    {
        MessageService.ClearMessages();
    }
    public void Cancel() => MudDialog?.Cancel();
}







