@namespace Client.Pages

@page "/budgetdashboard"
@using Client.Models
@inject Client.Services.BudgetApiClient budgetApiClient
@inject Client.Services.YearApiClient yearsApiClient
@inject Client.Services.BudgetCompletionApiClient budgetCompletionApiClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager UriHelper
@inject IMessageService MessageService
@inject DatePicker datePicker
@inject Charts chart

<style>
    td {
        text-align: center;
        border: 1px solid rgb(190, 190, 190);
        padding: 1px;
    }

    th {
        text-align: center;
        border: 1px solid rgb(190, 190, 190);
        padding: 5px;
    }


    th[scope='income-row'] {
        background-color: rgba(187, 171, 229);
    }

    th[scope='expenses-row'] {
        background-color: rgb(251, 180, 192);
    }

    th[scope='savings-row'] {
        background-color: rgb(135, 189, 228);
    }

    th[scope='dash-th'] {
        background-color: rgb(232, 202, 163);
    }

    td[scope='income-col'] {
        background-color: rgb(187, 171, 229);
    }

    td[scope='expenses-col'] {
        background-color: rgb(251, 180, 192);
    }

    s td[scope='savings-col'] {
        background-color: rgb(187, 225, 253);
    }

    td[scope='progress-col'] {
        padding: 0%;
    }

    td[scope='dash-td'] {
        background-color: rgb(241, 224, 200);
    }

    table {
        border-collapse: collapse;
        border: 2pxsolidrgb(200, 200, 200);
        letter-spacing: 1px;
        font-family: sans-serif;
        font-size: 0.8rem;
    }

    select {
        font-size: 0.9rem;
        padding: 2px5px;
    }

    .progress {
        height: 100%;
        width: 100%;
        border-radius: 0px 0px 0px 0px;
        background-color: white;
    }

    .start-dashboard {
        font-style: none;
        font-variant: small-caps;
        font-weight: bold;
        font-size: 24px;
        line-height: none;
        font-family: cursive;
    }

    #dash {
        align-items: center;
        font-size: 15px;
    }

    #dashMonth {
        align-items: center;
        font-size: 30px;
    }

    #dash-body {
        font-style: none;
        font-variant: small-caps;
        font-weight: normal;
        font-size: 24px;
        line-height: none;
        font-family: cursive;
    }
</style>

<MudGrid>
    <MudItem xs="12" sm="4">
        <MudPaper Class="pa-16 ma-2" Outlined="true" Square="true" Height="100%">
            <div class="start-dashboard">
                <div class="incline-block">
                    <div class="d-flex" style="max-width:100px;">
                        <MudDatePicker @bind-Date="_selectedPeriod" MinDate="@datePicker.MinPeriodInterval"
                            MaxDate="@datePicker.MaxPeriodInteval" PickerClosed="@GetDataByMonthIdAsync" />
                    </div>
                </div>
                <label id="dashMonth">
                    @datePicker.DashBoardSelectedMonth
                </label>
            </div>
            <p>
                <label id="dash">
                    --BudgetDashBoard--
                </label>
            </p>
            <thead>
                <tr>
                    <th colspan="2" scope="dash-th">
                        OVERVIEW
                    </th>
                </tr>
            </thead>
            <tbody id="dash-body">
                <tr>
                    <td scope="dash-td">
                        Start Date
                    </td>
                    <td>
                        @datePicker.MinDashboardDate
                    </td>
                </tr>
                <tr>
                    <td scope="dash-td">
                        End Date
                    </td>
                    <td>
                        @datePicker.MaxDashboardDate
                    </td>
                </tr>
                <tr>
                    <td scope="dash-td">
                        Starting Balance
                    </td>
                    @if (_income != null)
                    {
                        <td>
                            @(_income!.Income!.TrackedEmployment + @_income.Income.TrackedSideHustle + @_income.Income.TrackedDividends)
                        </td>
                    }
                </tr>
            </tbody>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="4">
        <MudPaper Class="pa-16 ma-2" Outlined="true" Square="true">
            <div class="savings-chart">
                @if (_trackedChartPlot != null && _actualChartPlot != null)
                {
                    <ApexChart TItem="PieChartModel" Title="Tracked (vs Budget)" @ref="_apexChartBar" Options=_options>
                        <ApexPointSeries TItem="PieChartModel" Items="_trackedChartPlot" Name="Tracked"
                            XValue="@(e => e.Name)" SeriesType="SeriesType.Bar" YAggregate="@(e => e.Sum(e => e.Value))"
                            OrderByDescending="e=>e.Y" Color="#bbabe5" />

                        <ApexPointSeries TItem="PieChartModel" Items="_actualChartPlot" Name="Planned"
                            SeriesType="SeriesType.Bar" XValue="@(e => e.Name)" YAggregate="@(e => e.Sum(e => e.Value))"
                            OrderByDescending="e=>e.Y" Color="#fbb4c0" />
                    </ApexChart>
                }
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="4">
        <MudPaper Class="pa-16 ma-2" Outlined="true" Square="true" Height="100%">
            <div class="tracked-group-chart">
                @if (_trackedChartPlot != null)
                {
                    <ApexChart TItem="PieChartModel" Title="Breakdown" @ref="_apexChartPie">
                        <ApexPointSeries TItem="PieChartModel" Items="_trackedChartPlot" Name="Breakdown"
                            SeriesType="SeriesType.Pie" XValue="@(e => e.Name)" YAggregate="@(e => e.Sum(e => e.Value))"
                            OrderByDescending="e=>e.Y" PointColor="e=> chart.GetPointColor(e)" ShowDataLabels />
                     </ApexChart>
                }
            </div>
        </MudPaper>
    </MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs="12" sm="4">
        <MudPaper Class="pa-16 ma-2" Outlined="false" Square="true" Height="100%">
            <div class="income-tab">
                <table>
                    <tr>
                        <th scope="income-row">Income</th>
                        <th scope="income-row">Tracked</th>
                        <th scope="income-row">Budget</th>
                        <th scope="income-row">%Compl.</th>
                        <th scope="income-row">Remaining</th>
                        <th scope="income-row">Excess</th>
                    </tr>
                    @if (_income != null)
                    {
                        <tr>
                            <td>Employment</td>
                            <td>@_income!.Income!.TrackedEmployment</td>
                            <td>@_income.Income.Employment</td>
                            <td scope="progress-col">
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar"
                                        style="width: @_budgetCompletionPercent!.IncomeCompletedEmployment%"
                                        aria-valuenow="@_budgetCompletionPercent.IncomeCompletedEmployment"
                                        aria-valuemin="0" aria-valuemax="100">
                                        @Decimal.Round(_budgetCompletionPercent.IncomeCompletedEmployment, 2)%
                                    </div>
                                </div>
                            </td>
                            @if (@_budgetCompletion!.IncomeCompletedEmployment >= 0)
                            {
                                <td>@_budgetCompletion.IncomeCompletedEmployment</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@_budgetCompletion.IncomeCompletedEmployment <= 0)
                            {
                                <td>@Math.Abs(@_budgetCompletion.IncomeCompletedEmployment)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>SideHustle</td>
                        <td>@_income.Income.TrackedSideHustle</td>
                        <td>@_income.Income.SideHustle</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @_budgetCompletionPercent.IncomeCompletedSidehustle%"
                                    aria-valuenow="@_budgetCompletionPercent.IncomeCompletedSidehustle"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(_budgetCompletionPercent.IncomeCompletedSidehustle, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@_budgetCompletion.IncomeCompletedSidehustle >= 0)
                            {
                                <td>@_budgetCompletion.IncomeCompletedSidehustle</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@_budgetCompletion.IncomeCompletedSidehustle <= 0)
                            {
                                <td>@Math.Abs(@_budgetCompletion.IncomeCompletedSidehustle)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Dividents</td>
                        <td>@_income.Income.TrackedDividends</td>
                        <td>@_income.Income.Dividends</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @_budgetCompletionPercent.IncomeCompletedDividends%"
                                    aria-valuenow="@_budgetCompletionPercent.IncomeCompletedDividends" aria-valuemin="0"
                                    aria-valuemax="100">
                                    @Decimal.Round(_budgetCompletionPercent.IncomeCompletedDividends, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@_budgetCompletion.IncomeCompletedDividends >= 0)
                            {
                                <td>@_budgetCompletion.IncomeCompletedDividends</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@_budgetCompletion.IncomeCompletedDividends <= 0)
                            {
                                <td>@Math.Abs(@_budgetCompletion.IncomeCompletedDividends)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td scope="totalIncome-row">Total</td>
                        <td scope="totalIncome-row">@_income.TrackedMonthlyIncome</td>
                        <td scope="totalIncome-row">@_income.MonthlyIncome</td>
                        <td scope="totalIncome-row">%</td>
                        <td scope="totalIncome-row">@_trackedRemainingIncome</td>
                        <td scope="totalIncome-row">@_trackedExcessIncome</td>
                    </tr>
                    }
                    else
                    {
                        <h1>loading...</h1>
                    }
                </table>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="4">
        <MudPaper Class="pa-16 ma-2" Outlined="false" Square="true" Height="100%">
            <div class="table-2">
                <table>
                    <tr>
                        <th scope="savings-row">Savings</th>
                        <th scope="savings-row">Tracked</th>
                        <th scope="savings-row">Budget</th>
                        <th scope="savings-row">%Compl.</th>
                        <th scope="savings-row">Remaining</th>
                        <th scope="savings-row">Excess</th>
                    </tr>
                    @if (_savings != null)
                    {
                        <tr>
                            <td>EmergencyFund</td>
                            <td>@_savings!.Savings!.TrackedEmergencyFund</td>
                            <td>@_savings.Savings.EmergencyFund</td>
                            <td scope="progress-col">
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar"
                                        style="width: @_budgetCompletionPercent!.SavingsCompletedEmergencyFund%"
                                        aria-valuenow="@_budgetCompletionPercent.SavingsCompletedEmergencyFund"
                                        aria-valuemin="0" aria-valuemax="100">
                                        @Decimal.Round(_budgetCompletionPercent.SavingsCompletedEmergencyFund, 2)%
                                    </div>
                                </div>
                            </td>
                            @if (@_budgetCompletion!.SavingsCompletedEmergencyFund >= 0)
                            {
                                <td>@_budgetCompletion.SavingsCompletedEmergencyFund</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@_budgetCompletion.SavingsCompletedEmergencyFund <= 0)
                            {
                                <td>@Math.Abs(@_budgetCompletion.SavingsCompletedEmergencyFund)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>RetirementAccount</td>
                        <td>@_savings.Savings.TrackedRetirementAccount</td>
                        <td>@_savings.Savings.RetirementAccount</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @_budgetCompletionPercent.SavingsCompletedRetirementAccount%"
                                    aria-valuenow="@_budgetCompletionPercent.SavingsCompletedRetirementAccount"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(_budgetCompletionPercent.SavingsCompletedRetirementAccount,
                                    2)%
                                </div>
                            </div>
                        </td>
                        @if (@_budgetCompletion.SavingsCompletedRetirementAccount >= 0)
                            {
                                <td>@_budgetCompletion.SavingsCompletedRetirementAccount</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@_budgetCompletion.SavingsCompletedRetirementAccount <= 0)
                            {
                                <td>@Math.Abs(@_budgetCompletion.SavingsCompletedRetirementAccount)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Vacation</td>
                        <td>@_savings.Savings.TrackedVacation</td>
                        <td>@_savings.Savings.Vacation</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @_budgetCompletionPercent.SavingsCompletedVacation%" aria-valuemin="0"
                                    aria-valuenow="@_budgetCompletionPercent.SavingsCompletedVacation"
                                    aria-valuemax="100">
                                    @Decimal.Round(_budgetCompletionPercent.SavingsCompletedVacation, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@_budgetCompletion.SavingsCompletedVacation >= 0)
                            {
                                <td>@_budgetCompletion.SavingsCompletedVacation</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@_budgetCompletion.SavingsCompletedVacation <= 0)
                            {
                                <td>@Math.Abs(@_budgetCompletion.SavingsCompletedVacation)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>HealthNeeds</td>
                        <td>@_savings.Savings.TrackedHealthNeeds</td>
                        <td>@_savings.Savings.HealthNeeds</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @_budgetCompletionPercent.SavingsCompletedHealthNeeds%"
                                    aria-valuenow="@_budgetCompletionPercent.SavingsCompletedHealthNeeds"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(_budgetCompletionPercent.SavingsCompletedHealthNeeds, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@_budgetCompletion.SavingsCompletedHealthNeeds >= 0)
                            {
                                <td>@_budgetCompletion.SavingsCompletedHealthNeeds</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@_budgetCompletion.SavingsCompletedHealthNeeds <= 0)
                            {
                                <td>@Math.Abs(@_budgetCompletion.SavingsCompletedHealthNeeds)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td scope="totalSavings-row">Total</td>
                        <td scope="totalSavings-row">@_savings.TrackedMonthlySavings</td>
                        <td scope="totalSavings-row">@_savings.MonthlySavings</td>
                        <td scope="totalSavings-row">%</td>
                        <td scope="totalSavings-row">@_trackedRemainingSavings</td>
                        <td scope="totalSavings-row">@_trackedExcessSavings</td>
                    </tr>
                    }
                    else
                    {
                        <h1>loading...</h1>
                    }
                </table>
            </div>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="4">
        <MudPaper Class="pa-16 ma-2" Outlined="false" Square="true" Height="100%">
            <div class="table-3">
                <table>
                    <tr>
                        <th scope="expenses-row">Expenses</th>
                        <th scope="expenses-row">Tracked</th>
                        <th scope="expenses-row">Budget</th>
                        <th scope="expenses-row">%Compl.</th>
                        <th scope="expenses-row">Remaining</th>
                        <th scope="expenses-row">Excess</th>
                    </tr>
                    @if (_expenses != null)
                    {
                        <tr>
                            <td>Housing</td>
                            <td>@_expenses!.Expenses!.TrackedHousing</td>
                            <td>@_expenses.Expenses.Housing</td>
                            <td scope="progress-col">
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar"
                                        style="width: @_budgetCompletionPercent!.ExpensesCompletedHousing%"
                                        aria-valuenow="@_budgetCompletionPercent.ExpensesCompletedHousing" aria-valuemin="0"
                                        aria-valuemax="100">
                                        @Decimal.Round(_budgetCompletionPercent.ExpensesCompletedHousing, 2)%
                                    </div>
                                </div>
                            </td>
                            @if (@_budgetCompletion!.ExpensesCompletedHousing >= 0)
                            {
                                <td>@_budgetCompletion.ExpensesCompletedHousing</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@_budgetCompletion.ExpensesCompletedHousing <= 0)
                            {
                                <td>@Math.Abs(@_budgetCompletion.ExpensesCompletedHousing)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Groceries</td>
                        <td>@_expenses.Expenses.TrackedGroceries</td>
                        <td>@_expenses.Expenses.Groceries</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @_budgetCompletionPercent.ExpensesCompletedGroceries%"
                                    aria-valuenow="@_budgetCompletionPercent.ExpensesCompletedGroceries"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(_budgetCompletionPercent.ExpensesCompletedGroceries, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@_budgetCompletion.ExpensesCompletedGroceries >= 0)
                            {
                                <td>@_budgetCompletion.ExpensesCompletedGroceries</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@_budgetCompletion.ExpensesCompletedGroceries <= 0)
                            {
                                <td>@Math.Abs(_budgetCompletion.ExpensesCompletedGroceries)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Utilities</td>
                        <td>@_expenses.Expenses.TrackedUtilities</td>
                        <td>@_expenses.Expenses.Utilities</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @_budgetCompletionPercent.ExpensesCompletedUtilities%"
                                    aria-valuenow="@_budgetCompletionPercent.ExpensesCompletedUtilities"
                                    aria-valuemax="100">
                                    @Decimal.Round(_budgetCompletionPercent.ExpensesCompletedUtilities, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@_budgetCompletion.ExpensesCompletedUtilities >= 0)
                            {
                                <td>@_budgetCompletion.ExpensesCompletedUtilities</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@_budgetCompletion.ExpensesCompletedUtilities <= 0)
                            {
                                <td>@Math.Abs(_budgetCompletion.ExpensesCompletedUtilities)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Vacation</td>
                        <td>@_expenses.Expenses.TrackedVacation</td>
                        <td>@_expenses.Expenses.Vacation</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @_budgetCompletionPercent.ExpensesCompletedVacation%"
                                    aria-valuenow="@_budgetCompletionPercent.ExpensesCompletedVacation"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(_budgetCompletionPercent.ExpensesCompletedVacation, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@_budgetCompletion.ExpensesCompletedVacation >= 0)
                            {
                                <td>@_budgetCompletion.ExpensesCompletedVacation</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@_budgetCompletion.ExpensesCompletedVacation <= 0)
                            {
                                <td>@Math.Abs(_budgetCompletion.ExpensesCompletedVacation)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Transportation</td>
                        <td>@_expenses.Expenses.TrackedTransportation</td>
                        <td>@_expenses.Expenses.Transportation</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @_budgetCompletionPercent.ExpensesCompletedTransportation%"
                                    aria-valuenow="@_budgetCompletionPercent.ExpensesCompletedTransportation"
                                    aria-valuemax="100">
                                    @Decimal.Round(_budgetCompletionPercent.ExpensesCompletedTransportation, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@_budgetCompletion.ExpensesCompletedTransportation >= 0)
                            {
                                <td>@_budgetCompletion.ExpensesCompletedTransportation</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@_budgetCompletion.ExpensesCompletedTransportation <= 0)
                            {
                                <td>@Math.Abs(_budgetCompletion.ExpensesCompletedTransportation)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Medicine</td>
                        <td>@_expenses.Expenses.TrackedMedicine</td>
                        <td>@_expenses.Expenses.Medicine</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @_budgetCompletionPercent.ExpensesCompletedMedicine%"
                                    aria-valuenow="@_budgetCompletionPercent.ExpensesCompletedMedicine"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(_budgetCompletionPercent.ExpensesCompletedMedicine, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@_budgetCompletion.ExpensesCompletedMedicine >= 0)
                            {
                                <td>@_budgetCompletion.ExpensesCompletedMedicine</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@_budgetCompletion.ExpensesCompletedMedicine <= 0)
                            {
                                <td>@Math.Abs(_budgetCompletion.ExpensesCompletedMedicine)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Clothing</td>
                        <td>@_expenses.Expenses.TrackedClothing</td>
                        <td>@_expenses.Expenses.Clothing</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @_budgetCompletionPercent.ExpensesCompletedClothing%"
                                    aria-valuenow="@_budgetCompletionPercent.ExpensesCompletedClothing"
                                    aria-valuemax="100">
                                    @Decimal.Round(_budgetCompletionPercent.ExpensesCompletedClothing, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@_budgetCompletion.ExpensesCompletedClothing >= 0)
                            {
                                <td>@_budgetCompletion.ExpensesCompletedClothing</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@_budgetCompletion.ExpensesCompletedClothing <= 0)
                            {
                                <td>@Math.Abs(_budgetCompletion.ExpensesCompletedClothing)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Media</td>
                        <td>@_expenses.Expenses.TrackedMedia</td>
                        <td>@_expenses.Expenses.Media</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @_budgetCompletionPercent.ExpensesCompletedMedia%"
                                    aria-valuenow="@_budgetCompletionPercent.ExpensesCompletedMedia"
                                    aria-valuemax="100">
                                    @Decimal.Round(_budgetCompletionPercent.ExpensesCompletedMedia, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@_budgetCompletion.ExpensesCompletedMedia >= 0)
                            {
                                <td>@_budgetCompletion.ExpensesCompletedMedia</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@_budgetCompletion.ExpensesCompletedMedia <= 0)
                            {
                                <td>@Math.Abs(_budgetCompletion.ExpensesCompletedMedia)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Insuranses</td>
                        <td>@_expenses.Expenses.TrackedInsuranses</td>
                        <td>@_expenses.Expenses.Insuranses</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @_budgetCompletionPercent.ExpensesCompletedInsuranses%"
                                    aria-valuenow="@_budgetCompletionPercent.ExpensesCompletedInsuranses"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(_budgetCompletionPercent.ExpensesCompletedInsuranses, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@_budgetCompletion.ExpensesCompletedInsuranses >= 0)
                            {
                                <td>@_budgetCompletion.ExpensesCompletedInsuranses</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@_budgetCompletion.ExpensesCompletedInsuranses <= 0)
                            {
                                <td>@Math.Abs(_budgetCompletion.ExpensesCompletedInsuranses)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td scope="totalExpenses-row">Total</td>
                        <td scope="totalExpenses-row">@_expenses?.TrackedMonthlyExpenses</td>
                        <td scope="totalExpenses-row">@_expenses?.MonthlyExpenses</td>
                        <td scope="totalExpenses-row">%</td>
                        <td scope="totalExpenses-row">@_trackedRemainingExpenses</td>
                        <td scope="totalExpenses-row">@_trackedExcessExpenses</td>
                    </tr>
                    }
                    else
                    {
                        <h1>loading...</h1>
                    }
                </table>
            </div>
        </MudPaper>
    </MudItem>
</MudGrid>

@code
{
    private decimal _trackedRemainingIncome = 0;
    private decimal _trackedRemainingSavings = 0;
    private decimal _trackedRemainingExpenses = 0;
    private decimal _trackedExcessIncome = 0;
    private decimal _trackedExcessSavings = 0;
    private decimal _trackedExcessExpenses = 0;
    private PieChartModel[]? _trackedChartPlot = new PieChartModel[3]
    {
        new PieChartModel { Name = "Income", Value = 0 },
        new PieChartModel { Name = "Expenses", Value = 0 },
        new PieChartModel { Name = "Savings", Value = 0 }
    };
    private PieChartModel[]? _actualChartPlot = new PieChartModel[3]
    {
        new PieChartModel { Name = "Income", Value = 0 },
        new PieChartModel { Name = "Expenses", Value = 0 },
        new PieChartModel { Name = "Savings", Value = 0 }
    };
    private BudgetModel? _income { get; set; }
    private BudgetModel? _savings { get; set; }
    private BudgetModel? _expenses { get; set; }
    private ApexChartOptions<PieChartModel>? _options;
    private IEnumerable<YearModel>? _years = new List<YearModel>();
    private IEnumerable<BudgetModel>? _months = new List<BudgetModel>();
    private BudgetCompletionModel? _budgetCompletion = new BudgetCompletionModel();
    private BudgetCompletionModel? _budgetCompletionPercent = new BudgetCompletionModel();
    private ApexChart<PieChartModel>? _apexChartBar;
    private ApexChart<PieChartModel>? _apexChartPie;
    private DateTime? _selectedPeriod = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        _options = chart.MakeBarChartHorizontal(_options!);
        _years = await yearsApiClient.GetYearsAsync();
        _months = await budgetApiClient.GetMonthsAsync();
        _income = await budgetApiClient.GetIncomeByMonthIdAsync(GetLastMonth());
        _savings = await budgetApiClient.GetSavingsByMonthIdAsync(GetLastMonth());
        _expenses = await budgetApiClient.GetExpensesByMonthIdAsync(GetLastMonth());
        _budgetCompletion = await budgetCompletionApiClient.GetByMonthIdAsync(GetLastMonth());
        _budgetCompletionPercent = await budgetCompletionApiClient.GetPercentByMonthIdAsync(GetLastMonth());
        EvaluateTotalRemainingAndExcessBudget();
        datePicker.SetMinAndMaxYearPeriodForCalendar(_years!);
        datePicker.SetInterval(_selectedPeriod);
    }

    public int GetLastMonth()
    {
        int monthId = _months!
                            .Select(month => month.Id)
                            .LastOrDefault();
        return monthId;
    }

    public async Task GetDataByMonthIdAsync()
    {
        int monthId = datePicker.GetMonthId(_selectedPeriod, _years!, _months!);
        _budgetCompletion = await budgetCompletionApiClient.GetByMonthIdAsync(monthId);
        _budgetCompletionPercent = await budgetCompletionApiClient.GetPercentByMonthIdAsync(monthId);
        await GetIncomeByMonthIdAsync(monthId);
        await GetExpensesByMonthIdAsync(monthId);
        await GetSavingsByMonthIdAsync(monthId);
        await UpdateChartsAsync();
        EvaluateTotalRemainingAndExcessBudget();
        datePicker.SetInterval(_selectedPeriod);
    }

    public async Task GetSavingsByMonthIdAsync(int monthId)
    {
        _savings = await budgetApiClient.GetSavingsByMonthIdAsync(monthId);
        StateHasChanged();
    }
    public async Task GetIncomeByMonthIdAsync(int monthId)
    {
        _income = await budgetApiClient.GetIncomeByMonthIdAsync(monthId);
        StateHasChanged();
    }
    public async Task GetExpensesByMonthIdAsync(int monthId)
    {
        _expenses = await budgetApiClient.GetExpensesByMonthIdAsync(monthId);
        StateHasChanged();
    }

    private async Task UpdateChartsAsync()
    {
        var resultTracked = chart.SetTrackedBudgetForGroupBarChart(_income!, _savings!, _expenses!);
        Array.Copy(resultTracked, _trackedChartPlot!, 3);

        var resultActual = chart.SetActualBudgetForGroupBarChart(_income!, _savings!, _expenses!);
        Array.Copy(resultActual, _actualChartPlot!, 3);

        if (_apexChartBar == null || _apexChartPie == null)
            return;

        await _apexChartBar.UpdateSeriesAsync();
        await _apexChartPie.UpdateSeriesAsync();
    }

    public void EvaluateTotalRemainingAndExcessBudget()
    {
        _trackedRemainingIncome = 0;
        _trackedRemainingSavings = 0;
        _trackedRemainingExpenses = 0;
        _trackedExcessIncome = 0;
        _trackedExcessSavings = 0;
        _trackedExcessExpenses = 0;

        foreach (var item in _budgetCompletion!.GetType().GetProperties())
        {
            decimal category = (decimal)item.GetValue(_budgetCompletion, null)!;

            switch (item.Name)
            {
                case string name when name.Contains("Income"):
                    EvaluateRemainingAndExcessIncome(category);
                    break;
                case string name when name.Contains("Savings"):
                    EvaluateRemainingAndExcessSavings(category);
                    break;
                case string name when name.Contains("Expenses"):
                    EvaluateRemainingAndExcessExpenses(category);
                    break;
            }
        }
    }

    private void EvaluateRemainingAndExcessIncome(decimal category)
    {
        if (category >= 0)
        {
            _trackedRemainingIncome += category;
            return;
        }
        _trackedExcessIncome += Math.Abs(category);
    }
    
    private void EvaluateRemainingAndExcessSavings(decimal category)
    {
        if (category >= 0)
        {
            _trackedRemainingSavings += category;
            return;
        }
        _trackedExcessSavings += Math.Abs(category);
    }

    private void EvaluateRemainingAndExcessExpenses(decimal category)
    {
        if (category >= 0)
        {
            _trackedRemainingExpenses += category;
            return;
        }
        _trackedExcessExpenses += Math.Abs(category);
    }
}
