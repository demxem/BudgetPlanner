@page "/budgetdashboard"
@using Client.Models
@inject Client.Services.IncomeApiClient incomeApiClient
@inject Client.Services.SavingsApiClient savingsApiClient
@inject Client.Services.ExpensesApiClient expensesApiClient
@inject Client.Services.YearApiClient yearsApiClient
@inject Client.Services.CompletedBudgetApiService budgetCompletion
@inject Client.Services.MonthsApiClient monthsApiClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager UriHelper
@inject IMessageService MessageService

<style>
    td,
    th {
        text-align: center;
        border: 1px solid rgb(190, 190, 190);
        padding: 10px;
    }

    th[scope='income-row'] {
        background-color: rgb(54, 240, 54);
    }

    th[scope='expenses-row'] {
        background-color: rgb(213, 100, 119);
    }

    th[scope='savings-row'] {
        background-color: rgb(77, 170, 236);
    }

    td[scope='totalIncome-row'] {
        font-weight: bold;
        font-style: italic;
    }

    td[scope='totalSavings-row'] {
        font-weight: bold;
        font-style: italic;
    }

    td[scope='totalExpenses-row'] {
        font-weight: bold;
        font-style: italic;
    }

    .progress {
        height: 20px;
    }

    table {
        border-collapse: collapse;
        border: 2px solid rgb(200, 200, 200);
        letter-spacing: 1px;
        font-family: sans-serif;
        font-size: 0.8rem;
    }

    select {
        font-size: 0.9rem;
        padding: 2px 5px;
    }
</style>

<select @onchange="((ChangeEventArgs e) => GetLatestDataByYearIdAsync(e))">
    <option value="budget">Year</option>
    @foreach (var year in Years)
    {
        <option value="@year.Id">@year.Name</option>
    }
</select>

<select @onchange="((ChangeEventArgs e) => GetIncomeByMonthIdAsync(e))">
    <option value="income">Income</option>
    @foreach (var month in Income)
    {
        <option value="@month.Id">Income in @month.Name</option>
    }
</select>

<select @onchange="((ChangeEventArgs e) => GetSavingsByMonthIdAsync(e))">
    <option value="savings">Savings</option>
    @foreach (var month in Savings)
    {
        <option value="@month.Id">Savings in @month.Name</option>
    }
</select>

<select @onchange="((ChangeEventArgs e) => GetExpensesByMonthIdAsync(e))">
    <option value="expenses">Expenses</option>
    @foreach (var month in Expenses)
    {
        <option value="@month.Id">Expenses in @month.Name</option>
    }
</select>
<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%">
                <table>
                    <tr>
                        <th scope="income-row">Income</th>
                        <th scope="income-row">Tracked</th>
                        <th scope="income-row">Budget</th>
                        <th scope="income-row">%Compl.</th>
                        <th scope="income-row">Remaining</th>
                        <th scope="income-row">Excess</th>
                    </tr>
                    @if (TrackedBudgetIncome != null)
                    {
                        <tr>
                            <td>Employment</td>
                            <td>@TrackedBudgetIncome.Income.TrackedEmployment</td>
                            <td>@TrackedBudgetIncome.Income.Employment</td>
                            <td>
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar"
                                        style="width: @BudgetCompletionPercent.IncomeCompletedEmployment%"
                                        aria-valuenow="@BudgetCompletionPercent.IncomeCompletedEmployment" aria-valuemin="0"
                                        aria-valuemax="100">
                                        @Decimal.Round(BudgetCompletionPercent.IncomeCompletedEmployment, 2)%
                                    </div>
                                </div>
                            </td>
                            @if (@BudgetCompletion.IncomeCompletedEmployment >= 0)
                            {
                                <td>@BudgetCompletion.IncomeCompletedEmployment</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.IncomeCompletedEmployment <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.IncomeCompletedEmployment)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>SideHustle</td>
                        <td>@TrackedBudgetIncome.Income.TrackedSideHustle</td>
                        <td>@TrackedBudgetIncome.Income.SideHustle</td>
                        <td>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.IncomeCompletedSidehustle%"
                                    aria-valuenow="@BudgetCompletionPercent.IncomeCompletedSidehustle" aria-valuemin="0"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.IncomeCompletedSidehustle, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.IncomeCompletedSidehustle >= 0)
                            {
                                <td>@BudgetCompletion.IncomeCompletedSidehustle</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.IncomeCompletedSidehustle <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.IncomeCompletedSidehustle)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Dividents</td>
                        <td>@TrackedBudgetIncome.Income.TrackedDividends</td>
                        <td>@TrackedBudgetIncome.Income.Dividends</td>
                        <td>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.IncomeCompletedDividends%"
                                    aria-valuenow="@BudgetCompletionPercent.IncomeCompletedDividends" aria-valuemin="0"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.IncomeCompletedDividends, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.IncomeCompletedDividends >= 0)
                            {
                                <td>@BudgetCompletion.IncomeCompletedDividends</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.IncomeCompletedDividends <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.IncomeCompletedDividends)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td scope="totalIncome-row">Total</td>
                        <td scope="totalIncome-row">@TrackedBudgetIncome.TrackedMonthlyIncome</td>
                        <td scope="totalIncome-row">@TrackedBudgetIncome.MonthlyIncome</td>
                        <td scope="totalIncome-row">%</td>
                        <td scope="totalIncome-row">@trackedRemainingIncome</td>
                        <td scope="totalIncome-row">@trackedExcessIncome</td>
                    </tr>
                    }
                    else
                    {
                        <h1>loading...</h1>
                    }
                </table>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%">
                <table>
                    <tr>
                        <th scope="savings-row">Savings</th>
                        <th scope="savings-row">Tracked</th>
                        <th scope="savings-row">Budget</th>
                        <th scope="savings-row">%Compl.</th>
                        <th scope="savings-row">Remaining</th>
                        <th scope="savings-row">Excess</th>
                    </tr>
                    @if (TrackedBudgetSavings != null)
                    {
                        <tr>
                            <td>EmergencyFund</td>
                            <td>@TrackedBudgetSavings.Savings.TrackedEmergencyFund</td>
                            <td>@TrackedBudgetSavings.Savings.EmergencyFund</td>
                            <td>
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar"
                                        style="width: @BudgetCompletionPercent.SavingsCompletedEmergencyFund%"
                                        aria-valuenow="@BudgetCompletionPercent.SavingsCompletedEmergencyFund"
                                        aria-valuemin="0" aria-valuemax="100">
                                        @Decimal.Round(BudgetCompletionPercent.SavingsCompletedEmergencyFund, 2)%
                                    </div>
                                </div>
                            </td>
                            @if (@BudgetCompletion.SavingsCompletedEmergencyFund >= 0)
                            {
                                <td>@BudgetCompletion.SavingsCompletedEmergencyFund</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.SavingsCompletedEmergencyFund <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.SavingsCompletedEmergencyFund)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>RetirementAccount</td>
                        <td>@TrackedBudgetSavings.Savings.TrackedRetirementAccount</td>
                        <td>@TrackedBudgetSavings.Savings.RetirementAccount</td>
                        <td>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.SavingsCompletedRetirementAccount%"
                                    aria-valuenow="@BudgetCompletionPercent.SavingsCompletedRetirementAccount"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.SavingsCompletedRetirementAccount, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.SavingsCompletedRetirementAccount >= 0)
                            {
                                <td>@BudgetCompletion.SavingsCompletedRetirementAccount</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.SavingsCompletedRetirementAccount <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.SavingsCompletedRetirementAccount)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Vacation</td>
                        <td>@TrackedBudgetSavings.Savings.TrackedVacation</td>
                        <td>@TrackedBudgetSavings.Savings.Vacation</td>
                        <td>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.SavingsCompletedVacation%" aria-valuemin="0"
                                    aria-valuenow="@BudgetCompletionPercent.SavingsCompletedVacation"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.SavingsCompletedVacation, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.SavingsCompletedVacation >= 0)
                            {
                                <td>@BudgetCompletion.SavingsCompletedVacation</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.SavingsCompletedVacation <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.SavingsCompletedVacation)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>HealthNeeds</td>
                        <td>@TrackedBudgetSavings.Savings.TrackedHealthNeeds</td>
                        <td>@TrackedBudgetSavings.Savings.HealthNeeds</td>
                        <td>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.SavingsCompletedHealthNeeds%"
                                    aria-valuenow="@BudgetCompletionPercent.SavingsCompletedHealthNeeds"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.SavingsCompletedHealthNeeds, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.SavingsCompletedHealthNeeds >= 0)
                            {
                                <td>@BudgetCompletion.SavingsCompletedHealthNeeds</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.SavingsCompletedHealthNeeds <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.SavingsCompletedHealthNeeds)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td scope="totalSavings-row">Total</td>
                        <td scope="totalSavings-row">@TrackedBudgetSavings.TrackedMonthlySavings</td>
                        <td scope="totalSavings-row">@TrackedBudgetSavings.MonthlySavings</td>
                        <td scope="totalSavings-row">%</td>
                        <td scope="totalSavings-row">@trackedRemainingSavings</td>
                        <td scope="totalSavings-row">@trackedExcessSavings</td>
                    </tr>
                    }
                    else
                    {
                        <h1>loading...</h1>
                    }
                </table>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%">
                <table>
                    <tr>
                        <th scope="expenses-row">Expenses</th>
                        <th scope="expenses-row">Tracked</th>
                        <th scope="expenses-row">Budget</th>
                        <th scope="expenses-row">%Compl.</th>
                        <th scope="expenses-row">Remaining</th>
                        <th scope="expenses-row">Excess</th>
                    </tr>
                    @if (TrackedBudgetExpenses != null)
                    {
                        <tr>
                            <td>Housing</td>
                            <td>@TrackedBudgetExpenses.Expenses.TrackedHousing</td>
                            <td>@TrackedBudgetExpenses.Expenses.Housing</td>
                            <td>
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar"
                                        style="width: @BudgetCompletionPercent.ExpensesCompletedHousing%"
                                        aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedHousing" aria-valuemin="0"
                                        aria-valuemax="100">
                                        @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedHousing, 2)%
                                    </div>
                                </div>
                            </td>
                            @if (@BudgetCompletion.ExpensesCompletedHousing >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedHousing</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedHousing <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.ExpensesCompletedHousing)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Groceries</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedGroceries</td>
                        <td>@TrackedBudgetExpenses.Expenses.Groceries</td>
                        <td>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedGroceries%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedGroceries"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedGroceries, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedGroceries >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedGroceries</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedGroceries <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedGroceries)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Utilities</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedUtilities</td>
                        <td>@TrackedBudgetExpenses.Expenses.Utilities</td>
                        <td>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedUtilities%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedUtilities"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedUtilities, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedUtilities >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedUtilities</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedUtilities <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedUtilities)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Vacation</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedVacation</td>
                        <td>@TrackedBudgetExpenses.Expenses.Vacation</td>
                        <td>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedVacation%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedVacation" aria-valuemin="0"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedVacation, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedVacation >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedVacation</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedVacation <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedVacation)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Transportation</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedTransportation</td>
                        <td>@TrackedBudgetExpenses.Expenses.Transportation</td>
                        <td>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedTransportation%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedTransportation"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedTransportation, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedTransportation >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedTransportation</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedTransportation <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedTransportation)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Medicine</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedMedicine</td>
                        <td>@TrackedBudgetExpenses.Expenses.Medicine</td>
                        <td>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedMedicine%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedMedicine" aria-valuemin="0"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedMedicine, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedMedicine >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedMedicine</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedMedicine <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedMedicine)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Clothing</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedClothing</td>
                        <td>@TrackedBudgetExpenses.Expenses.Clothing</td>
                        <td>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedClothing%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedClothing"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedClothing, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedClothing >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedClothing</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedClothing <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedClothing)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Media</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedMedia</td>
                        <td>@TrackedBudgetExpenses.Expenses.Media</td>
                        <td>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedMedia%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedMedia" aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedMedia, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedMedia >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedMedia</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedMedia <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedMedia)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Insuranses</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedInsuranses</td>
                        <td>@TrackedBudgetExpenses.Expenses.Insuranses</td>
                        <td>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedInsuranses%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedInsuranses"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedInsuranses, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedInsuranses >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedInsuranses</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedInsuranses <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedInsuranses)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td scope="totalExpenses-row">Total</td>
                        <td scope="totalExpenses-row">@TrackedBudgetExpenses.TrackedMonthlyExpenses</td>
                        <td scope="totalExpenses-row">@TrackedBudgetExpenses.MonthlyExpenses</td>
                        <td scope="totalExpenses-row">%</td>
                        <td scope="totalExpenses-row">@trackedRemainingExpenses</td>
                        <td scope="totalExpenses-row">@trackedExcessExpenses</td>
                    </tr>
                    }
                    else
                    {
                        <h1>loading...</h1>
                    }
                </table>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{
    private int size = 50;
    private decimal result = 0;
    private decimal trackedRemainingIncome = 0;
    private decimal trackedRemainingSavings = 0;
    private decimal trackedRemainingExpenses = 0;
    private decimal trackedExcessIncome = 0;
    private decimal trackedExcessSavings = 0;
    private decimal trackedExcessExpenses = 0;
    private BudgetModel? TrackedBudgetIncome;
    private BudgetModel? TrackedBudgetSavings;
    private BudgetModel? TrackedBudgetExpenses;
    private IEnumerable<BudgetModel>? Expenses = new List<BudgetModel>();
    private IEnumerable<BudgetModel>? Savings = new List<BudgetModel>();
    public IEnumerable<BudgetModel>? Income = new List<BudgetModel>();
    private IEnumerable<YearModel>? Years = new List<YearModel>();
    private IEnumerable<BudgetModel>? Months = new List<BudgetModel>();
    private BudgetCompletionModel BudgetCompletion = new BudgetCompletionModel();
    private BudgetCompletionModel BudgetCompletionPercent = new BudgetCompletionModel();

    private YearModel selectedYear { get; set; } = new YearModel { Name = "" };

    protected override async Task OnInitializedAsync()
    {
        Years = await yearsApiClient.GetYearsAsync();
        Months = await monthsApiClient.GetMonthsAsync();
        TrackedBudgetIncome = await incomeApiClient.GetLatestIncomeAsync();
        TrackedBudgetSavings = await savingsApiClient.GetLatestSavingsAsync();
        TrackedBudgetExpenses = await expensesApiClient.GetLatestExpensesAsync();
        BudgetCompletion = await budgetCompletion.GetBudgetCompletionByMonthIdAsync(Months.Select(month =>
        month.Id).LastOrDefault());
        BudgetCompletionPercent = await budgetCompletion.GetBudgetCompletionByMonthIdInPercentAsync(Months.Select(month =>
        month.Id).LastOrDefault());
        CountTotalRemainingAndExcessBudget();
    }

    public async Task GetLatestDataByYearIdAsync(ChangeEventArgs e)
    {
        await GetLatestIncomeByYearIdAsync(e);
        await GetLatestExpensesByYearIdAsync(e);
        await GetLatestSavingsByYearIdAsync(e);
    }

    public async Task GetLatestIncomeByYearIdAsync(ChangeEventArgs e)
    {
        var yearId = int.Parse(e.Value?.ToString());
        Income = await incomeApiClient.GetIncomeByYearId(yearId);
        TrackedBudgetIncome = Income?.LastOrDefault();
        StateHasChanged();
    }

    public async Task GetIncomeByMonthIdAsync(ChangeEventArgs e)
    {
        var monthId = int.Parse(e.Value?.ToString());
        TrackedBudgetIncome = await incomeApiClient.GetIncomeByMonthIdAsync(monthId);
        StateHasChanged();
    }

    public async Task GetLatestSavingsByYearIdAsync(ChangeEventArgs e)
    {
        var yearId = int.Parse(e.Value?.ToString());
        Savings = await savingsApiClient.GetSavingsByYearId(yearId);
        TrackedBudgetSavings = Savings?.LastOrDefault();
        StateHasChanged();
    }

    public async Task GetSavingsByMonthIdAsync(ChangeEventArgs e)
    {
        var monthId = int.Parse(e.Value?.ToString());
        TrackedBudgetSavings = await savingsApiClient.GetSavingsByMonthIdAsync(monthId);
        StateHasChanged();
    }

    public async Task GetLatestExpensesByYearIdAsync(ChangeEventArgs e)
    {
        var yearId = int.Parse(e.Value?.ToString());
        Expenses = await expensesApiClient.GetExpensesByYearId(yearId);
        TrackedBudgetExpenses = Expenses?.LastOrDefault();
        StateHasChanged();
    }

    public async Task GetExpensesByMonthIdAsync(ChangeEventArgs e)
    {
        var monthId = int.Parse(e.Value?.ToString());
        TrackedBudgetExpenses = await expensesApiClient.GetExpensesByMonthIdAsync(monthId);
        StateHasChanged();
    }

    public void CountTotalRemainingAndExcessBudget()
    {
        foreach (var item in BudgetCompletion.GetType().GetProperties())
        {
            decimal category = (decimal)item.GetValue(BudgetCompletion, null);
            if (item.Name.Contains("Income"))
            {
                if (category >= 0)
                {
                    trackedRemainingIncome += category;
                }
                else if (category <= 0)
                {
                    trackedExcessIncome += Math.Abs(category);
                }
            }

            if (item.Name.Contains("Savings"))
            {
                if (category >= 0)
                {
                    trackedRemainingSavings += category;
                }
                else if (category <= 0)
                {
                    trackedRemainingSavings += Math.Abs(category);
                }
            }
            if (item.Name.Contains("Expenses"))
            {
                if (category >= 0)
                {
                    trackedRemainingExpenses += category;
                }
                else if (category <= 0)
                {
                    trackedExcessExpenses += Math.Abs(category);
                }
            }
        }
    }
}

