@page "/budgetdashboard"
@using Client.Models
@inject Client.Services.IncomeApiClient incomeApiClient
@inject Client.Services.SavingsApiClient savingsApiClient
@inject Client.Services.ExpensesApiClient expensesApiClient
@inject Client.Services.YearApiClient yearsApiClient
@inject Client.Services.CompletedBudgetApiService budgetCompletion
@inject Client.Services.MonthsApiClient monthsApiClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager UriHelper
@inject IMessageService MessageService
@inject DatePicker datePicker
@inject ChartPicker chart


<style>
    td {
        text-align: center;
        border: 1px solid rgb(190, 190, 190);
        padding: 1px;
    }

    th {
        text-align: center;
        border: 1px solid rgb(190, 190, 190);
        padding: 5px;
    }


    th[scope='income-row'] {
        background-color: rgba(187, 171, 229);
    }

    th[scope='expenses-row'] {
        background-color: rgb(251, 180, 192);
    }

    th[scope='savings-row'] {
        background-color: rgb(135, 189, 228);
    }

    th[scope='dash-th'] {
        background-color: rgb(232, 202, 163);
    }

    td[scope='income-col'] {
        background-color: rgb(187, 171, 229);
    }

    td[scope='expenses-col'] {
        background-color: rgb(251, 180, 192);
    }

    s td[scope='savings-col'] {
        background-color: rgb(187, 225, 253);
    }

    td[scope='progress-col'] {
        padding: 0%;
    }

    td[scope='dash-td'] {
        background-color: rgb(241, 224, 200);
    }

    table {
        border-collapse: collapse;
        border: 2pxsolidrgb(200, 200, 200);
        letter-spacing: 1px;
        font-family: sans-serif;
        font-size: 0.8rem;
    }

    select {
        font-size: 0.9rem;
        padding: 2px5px;
    }

    .progress {
        height: 100%;
        width: 100%;
        border-radius: 0px 0px 0px 0px;
        background-color: white;
    }

    .start-dashboard {
        font-style: none;
        font-variant: small-caps;
        font-weight: bold;
        font-size: 24px;
        line-height: none;
        font-family: cursive;
    }

    #dash {
        align-items: center;
        font-size: 15px;
    }

    #dashMonth {
        align-items: center;
        font-size: 30px;
    }

    #dash-body {
        font-style: none;
        font-variant: small-caps;
        font-weight: normal;
        font-size: 24px;
        line-height: none;
        font-family: cursive;
    }
</style>

<MudGrid>
    <MudItem xs="12" sm="4">
        <MudPaper Class="pa-16 ma-2" Outlined="true" Square="true" Height="100%">
            <div class="start-dashboard">
                <div class="incline-block">
                    <div class="d-flex" style="max-width:100px;">
                        <MudDatePicker @bind-Date="selectedPeriod" MinDate="@datePicker.MinimalPeriodInterval"
                            MaxDate="@datePicker.MaximumPeriodInteval" PickerClosed="@GetDataByMonthIdAsync" />
                    </div>
                </div>
                <label id="dashMonth">
                    @datePicker.DashBoardSelectedMonth
                </label>
            </div>
            <p>
                <label id="dash">
                    --BudgetDashBoard--
                </label>
            </p>
            <thead>
                <tr>
                    <th colspan="2" scope="dash-th">
                        OVERVIEW
                    </th>
                </tr>
            </thead>
            <tbody id="dash-body">
                <tr>
                    <td scope="dash-td">
                        Start Date
                    </td>
                    <td>
                        @datePicker.MinDashboardDate
                    </td>
                </tr>
                <tr>
                    <td scope="dash-td">
                        End Date
                    </td>
                    <td>
                        @datePicker.MaxDashboardDate
                    </td>
                </tr>
                <tr>
                    <td scope="dash-td">
                        Starting Balance
                    </td>
                    @if (TrackedBudgetIncome != null)
                    {
                        <td>
                            @(TrackedBudgetIncome!.Income!.TrackedEmployment +
                                @TrackedBudgetIncome.Income.TrackedSideHustle +
                                @TrackedBudgetIncome.Income.TrackedDividends)
                        </td>
                    }
                </tr>
            </tbody>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="4">
        <MudPaper Class="pa-16 ma-2" Outlined="true" Square="true">
            <div class="savings-chart">
                @if (TrackedGroupBarChart != null && ActualGroupBarChart != null)
                {
                    <ApexChart TItem="PieChartModel" Title="Tracked (vs Budget)" @ref="apexChart" Options=options>
                        <ApexPointSeries TItem="PieChartModel" Items="TrackedGroupBarChart" Name="Tracked"
                            XValue="@(e => e.Name)" SeriesType="SeriesType.Bar" YAggregate="@(e => e.Sum(e => e.Value))"
                            OrderByDescending="e=>e.Y" Color="#bbabe5" />

                        <ApexPointSeries TItem="PieChartModel" Items="ActualGroupBarChart" Name="Planned"
                            SeriesType="SeriesType.Bar" XValue="@(e => e.Name)" YAggregate="@(e => e.Sum(e => e.Value))"
                            OrderByDescending="e=>e.Y" Color="#fbb4c0" />
                    </ApexChart>
                }
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="4">
        <MudPaper Class="pa-16 ma-2" Outlined="true" Square="true" Height="100%">
            <div class="tracked-group-chart">
                @if (TrackedGroupBarChart != null)
                {
                    <ApexChart TItem="PieChartModel" Title="Breakdown" @ref="apexChartPie">
                        <ApexPointSeries TItem="PieChartModel" Items="TrackedGroupBarChart" Name="Breakdown"
                            SeriesType="SeriesType.Pie" XValue="@(e => e.Name)" YAggregate="@(e => e.Sum(e => e.Value))"
                            OrderByDescending="e=>e.Y" PointColor="e=> chart.GetPointColor(e)" ShowDataLabels />
                     </ApexChart>
                }
            </div>
        </MudPaper>
    </MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs="12" sm="4">
        <MudPaper Class="pa-16 ma-2" Outlined="false" Square="true" Height="100%">
            <div class="income-tab">
                <table>
                    <tr>
                        <th scope="income-row">Income</th>
                        <th scope="income-row">Tracked</th>
                        <th scope="income-row">Budget</th>
                        <th scope="income-row">%Compl.</th>
                        <th scope="income-row">Remaining</th>
                        <th scope="income-row">Excess</th>
                    </tr>
                    @if (TrackedBudgetIncome != null)
                    {
                        <tr>
                            <td>Employment</td>
                            <td>@TrackedBudgetIncome!.Income!.TrackedEmployment</td>
                            <td>@TrackedBudgetIncome.Income.Employment</td>
                            <td scope="progress-col">
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar"
                                        style="width: @BudgetCompletionPercent!.IncomeCompletedEmployment%"
                                        aria-valuenow="@BudgetCompletionPercent.IncomeCompletedEmployment" aria-valuemin="0"
                                        aria-valuemax="100">
                                        @Decimal.Round(BudgetCompletionPercent.IncomeCompletedEmployment, 2)%
                                    </div>
                                </div>
                            </td>
                            @if (@BudgetCompletion!.IncomeCompletedEmployment >= 0)
                            {
                                <td>@BudgetCompletion.IncomeCompletedEmployment</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.IncomeCompletedEmployment <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.IncomeCompletedEmployment)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>SideHustle</td>
                        <td>@TrackedBudgetIncome.Income.TrackedSideHustle</td>
                        <td>@TrackedBudgetIncome.Income.SideHustle</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.IncomeCompletedSidehustle%"
                                    aria-valuenow="@BudgetCompletionPercent.IncomeCompletedSidehustle" aria-valuemin="0"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.IncomeCompletedSidehustle, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.IncomeCompletedSidehustle >= 0)
                            {
                                <td>@BudgetCompletion.IncomeCompletedSidehustle</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.IncomeCompletedSidehustle <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.IncomeCompletedSidehustle)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Dividents</td>
                        <td>@TrackedBudgetIncome.Income.TrackedDividends</td>
                        <td>@TrackedBudgetIncome.Income.Dividends</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.IncomeCompletedDividends%"
                                    aria-valuenow="@BudgetCompletionPercent.IncomeCompletedDividends" aria-valuemin="0"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.IncomeCompletedDividends, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.IncomeCompletedDividends >= 0)
                            {
                                <td>@BudgetCompletion.IncomeCompletedDividends</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.IncomeCompletedDividends <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.IncomeCompletedDividends)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td scope="totalIncome-row">Total</td>
                        <td scope="totalIncome-row">@TrackedBudgetIncome.TrackedMonthlyIncome</td>
                        <td scope="totalIncome-row">@TrackedBudgetIncome.MonthlyIncome</td>
                        <td scope="totalIncome-row">%</td>
                        <td scope="totalIncome-row">@trackedRemainingIncome</td>
                        <td scope="totalIncome-row">@trackedExcessIncome</td>
                    </tr>
                    }
                    else
                    {
                        <h1>loading...</h1>
                    }
                </table>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="4">
        <MudPaper Class="pa-16 ma-2" Outlined="false" Square="true" Height="100%">
            <div class="table-2">
                <table>
                    <tr>
                        <th scope="savings-row">Savings</th>
                        <th scope="savings-row">Tracked</th>
                        <th scope="savings-row">Budget</th>
                        <th scope="savings-row">%Compl.</th>
                        <th scope="savings-row">Remaining</th>
                        <th scope="savings-row">Excess</th>
                    </tr>
                    @if (TrackedBudgetSavings != null)
                    {
                        <tr>
                            <td>EmergencyFund</td>
                            <td>@TrackedBudgetSavings!.Savings!.TrackedEmergencyFund</td>
                            <td>@TrackedBudgetSavings.Savings.EmergencyFund</td>
                            <td scope="progress-col">
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar"
                                        style="width: @BudgetCompletionPercent!.SavingsCompletedEmergencyFund%"
                                        aria-valuenow="@BudgetCompletionPercent.SavingsCompletedEmergencyFund"
                                        aria-valuemin="0" aria-valuemax="100">
                                        @Decimal.Round(BudgetCompletionPercent.SavingsCompletedEmergencyFund, 2)%
                                    </div>
                                </div>
                            </td>
                            @if (@BudgetCompletion!.SavingsCompletedEmergencyFund >= 0)
                            {
                                <td>@BudgetCompletion.SavingsCompletedEmergencyFund</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.SavingsCompletedEmergencyFund <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.SavingsCompletedEmergencyFund)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>RetirementAccount</td>
                        <td>@TrackedBudgetSavings.Savings.TrackedRetirementAccount</td>
                        <td>@TrackedBudgetSavings.Savings.RetirementAccount</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.SavingsCompletedRetirementAccount%"
                                    aria-valuenow="@BudgetCompletionPercent.SavingsCompletedRetirementAccount"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.SavingsCompletedRetirementAccount,
                                    2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.SavingsCompletedRetirementAccount >= 0)
                            {
                                <td>@BudgetCompletion.SavingsCompletedRetirementAccount</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.SavingsCompletedRetirementAccount <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.SavingsCompletedRetirementAccount)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Vacation</td>
                        <td>@TrackedBudgetSavings.Savings.TrackedVacation</td>
                        <td>@TrackedBudgetSavings.Savings.Vacation</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.SavingsCompletedVacation%" aria-valuemin="0"
                                    aria-valuenow="@BudgetCompletionPercent.SavingsCompletedVacation"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.SavingsCompletedVacation, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.SavingsCompletedVacation >= 0)
                            {
                                <td>@BudgetCompletion.SavingsCompletedVacation</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.SavingsCompletedVacation <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.SavingsCompletedVacation)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>HealthNeeds</td>
                        <td>@TrackedBudgetSavings.Savings.TrackedHealthNeeds</td>
                        <td>@TrackedBudgetSavings.Savings.HealthNeeds</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.SavingsCompletedHealthNeeds%"
                                    aria-valuenow="@BudgetCompletionPercent.SavingsCompletedHealthNeeds"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.SavingsCompletedHealthNeeds, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.SavingsCompletedHealthNeeds >= 0)
                            {
                                <td>@BudgetCompletion.SavingsCompletedHealthNeeds</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.SavingsCompletedHealthNeeds <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.SavingsCompletedHealthNeeds)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td scope="totalSavings-row">Total</td>
                        <td scope="totalSavings-row">@TrackedBudgetSavings.TrackedMonthlySavings</td>
                        <td scope="totalSavings-row">@TrackedBudgetSavings.MonthlySavings</td>
                        <td scope="totalSavings-row">%</td>
                        <td scope="totalSavings-row">@trackedRemainingSavings</td>
                        <td scope="totalSavings-row">@trackedExcessSavings</td>
                    </tr>
                    }
                    else
                    {
                        <h1>loading...</h1>
                    }
                </table>
            </div>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="4">
        <MudPaper Class="pa-16 ma-2" Outlined="false" Square="true" Height="100%">
            <div class="table-3">
                <table>
                    <tr>
                        <th scope="expenses-row">Expenses</th>
                        <th scope="expenses-row">Tracked</th>
                        <th scope="expenses-row">Budget</th>
                        <th scope="expenses-row">%Compl.</th>
                        <th scope="expenses-row">Remaining</th>
                        <th scope="expenses-row">Excess</th>
                    </tr>
                    @if (TrackedBudgetExpenses != null)
                    {
                        <tr>
                            <td>Housing</td>
                            <td>@TrackedBudgetExpenses!.Expenses!.TrackedHousing</td>
                            <td>@TrackedBudgetExpenses.Expenses.Housing</td>
                            <td scope="progress-col">
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar"
                                        style="width: @BudgetCompletionPercent!.ExpensesCompletedHousing%"
                                        aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedHousing" aria-valuemin="0"
                                        aria-valuemax="100">
                                        @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedHousing, 2)%
                                    </div>
                                </div>
                            </td>
                            @if (@BudgetCompletion!.ExpensesCompletedHousing >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedHousing</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedHousing <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.ExpensesCompletedHousing)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Groceries</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedGroceries</td>
                        <td>@TrackedBudgetExpenses.Expenses.Groceries</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedGroceries%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedGroceries"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedGroceries, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedGroceries >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedGroceries</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedGroceries <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedGroceries)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Utilities</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedUtilities</td>
                        <td>@TrackedBudgetExpenses.Expenses.Utilities</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedUtilities%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedUtilities"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedUtilities, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedUtilities >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedUtilities</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedUtilities <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedUtilities)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Vacation</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedVacation</td>
                        <td>@TrackedBudgetExpenses.Expenses.Vacation</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedVacation%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedVacation" aria-valuemin="0"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedVacation, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedVacation >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedVacation</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedVacation <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedVacation)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Transportation</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedTransportation</td>
                        <td>@TrackedBudgetExpenses.Expenses.Transportation</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedTransportation%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedTransportation"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedTransportation, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedTransportation >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedTransportation</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedTransportation <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedTransportation)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Medicine</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedMedicine</td>
                        <td>@TrackedBudgetExpenses.Expenses.Medicine</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedMedicine%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedMedicine" aria-valuemin="0"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedMedicine, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedMedicine >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedMedicine</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedMedicine <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedMedicine)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Clothing</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedClothing</td>
                        <td>@TrackedBudgetExpenses.Expenses.Clothing</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedClothing%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedClothing"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedClothing, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedClothing >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedClothing</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedClothing <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedClothing)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Media</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedMedia</td>
                        <td>@TrackedBudgetExpenses.Expenses.Media</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedMedia%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedMedia" aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedMedia, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedMedia >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedMedia</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedMedia <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedMedia)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Insuranses</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedInsuranses</td>
                        <td>@TrackedBudgetExpenses.Expenses.Insuranses</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedInsuranses%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedInsuranses"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedInsuranses, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedInsuranses >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedInsuranses</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedInsuranses <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedInsuranses)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td scope="totalExpenses-row">Total</td>
                        <td scope="totalExpenses-row">@TrackedBudgetExpenses?.TrackedMonthlyExpenses</td>
                        <td scope="totalExpenses-row">@TrackedBudgetExpenses?.MonthlyExpenses</td>
                        <td scope="totalExpenses-row">%</td>
                        <td scope="totalExpenses-row">@trackedRemainingExpenses</td>
                        <td scope="totalExpenses-row">@trackedExcessExpenses</td>
                    </tr>
                    }
                    else
                    {
                        <h1>loading...</h1>
                    }
                </table>
            </div>
        </MudPaper>
    </MudItem>
</MudGrid>

@code
{
    private decimal trackedRemainingIncome = 0;
    private decimal trackedRemainingSavings = 0;
    private decimal trackedRemainingExpenses = 0;
    private decimal trackedExcessIncome = 0;
    private decimal trackedExcessSavings = 0;
    private decimal trackedExcessExpenses = 0;

    private BudgetModel? TrackedBudgetIncome { get; set; }
    private BudgetModel? TrackedBudgetSavings { get; set; }
    private BudgetModel? TrackedBudgetExpenses { get; set; }
    private List<PieChartModel>? TrackedIncomePieChart { get; set; }
    private List<PieChartModel>? TrackedSavingsPieChart { get; set; }
    private List<PieChartModel>? TrackedExpensesPieChart { get; set; }

    private PieChartModel[]? TrackedGroupBarChart = new PieChartModel[3]
    {
new PieChartModel { Name = "Income", Value = 0 },
new PieChartModel { Name = "Expenses", Value = 0 },
new PieChartModel { Name = "Savings", Value = 0 }
    };
    private PieChartModel[]? ActualGroupBarChart = new PieChartModel[3]{
new PieChartModel { Name = "Income", Value = 0 },
new PieChartModel { Name = "Expenses", Value = 0 },
new PieChartModel { Name = "Savings", Value = 0 }
};
    private ApexChartOptions<PieChartModel>? options;
    private IEnumerable<BudgetModel>? Expenses = new List<BudgetModel>();
    private IEnumerable<BudgetModel>? Savings = new List<BudgetModel>();
    public IEnumerable<BudgetModel>? Income = new List<BudgetModel>();
    private IEnumerable<YearModel>? Years = new List<YearModel>();
    private IEnumerable<BudgetModel>? Months = new List<BudgetModel>();
    private BudgetCompletionModel? BudgetCompletion = new BudgetCompletionModel();
    private BudgetCompletionModel? BudgetCompletionPercent = new BudgetCompletionModel();
    private ApexChart<PieChartModel>? apexChart;
    private ApexChart<PieChartModel>? apexChartPie;
    private DateTime? selectedPeriod = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        options = chart.SetOptionsForBarChart(options!);
        Years = await yearsApiClient.GetYearsAsync();
        Months = await monthsApiClient.GetMonthsAsync();
        TrackedBudgetIncome = await incomeApiClient.GetLatestIncomeAsync();
        TrackedBudgetSavings = await savingsApiClient.GetLatestSavingsAsync();
        TrackedBudgetExpenses = await expensesApiClient.GetLatestExpensesAsync();
        BudgetCompletion = await budgetCompletion.GetBudgetCompletionByMonthIdAsync(Months!.Select(month =>
        month.Id).LastOrDefault());
        BudgetCompletionPercent = await budgetCompletion.GetBudgetCompletionByMonthIdInPercentAsync(Months!.Select(month =>
        month.Id).LastOrDefault());
        CountTotalRemainingAndExcessBudget();
        datePicker.SetMinAndMaxYearPeriodForCalendar(Years!);
        datePicker.SetDashboardIntervals(selectedPeriod);
    }

    public async Task GetDataByMonthIdAsync()
    {
        int monthId = datePicker.FindMonthId(selectedPeriod, Years!, Months!);
        BudgetCompletion = await budgetCompletion.GetBudgetCompletionByMonthIdAsync(monthId);
        BudgetCompletionPercent = await budgetCompletion.GetBudgetCompletionByMonthIdInPercentAsync(monthId);
        await GetIncomeByMonthIdAsync(monthId);
        await GetExpensesByMonthIdAsync(monthId);
        await GetSavingsByMonthIdAsync(monthId);
        await UpdateChartsAsync();
        CountTotalRemainingAndExcessBudget();
        datePicker.SetDashboardIntervals(selectedPeriod);
    }

    public async Task GetSavingsByMonthIdAsync(int monthId)
    {
        TrackedBudgetSavings = await savingsApiClient.GetSavingsByMonthIdAsync(monthId);
        StateHasChanged();
    }
    public async Task GetIncomeByMonthIdAsync(int monthId)
    {
        TrackedBudgetIncome = await incomeApiClient.GetIncomeByMonthIdAsync(monthId);
        StateHasChanged();
    }
    public async Task GetExpensesByMonthIdAsync(int monthId)
    {
        TrackedBudgetExpenses = await expensesApiClient.GetExpensesByMonthIdAsync(monthId);
        StateHasChanged();
    }

    private async Task UpdateChartsAsync()
    {
        var trackedResult = chart.SetTrackedGroupBarChart(TrackedBudgetIncome!, TrackedBudgetSavings!, TrackedBudgetExpenses!);
        Array.Copy(trackedResult, TrackedGroupBarChart!, 3);
        var groupResult = chart.SetActualGroupBarChart(TrackedBudgetIncome!, TrackedBudgetSavings!, TrackedBudgetExpenses!);
        Array.Copy(groupResult, ActualGroupBarChart!, 3);

        if (apexChart == null || apexChartPie == null)
            return;

        await apexChart.UpdateSeriesAsync();
        await apexChartPie.UpdateSeriesAsync();
    }

    public void CountTotalRemainingAndExcessBudget()
    {
        trackedRemainingIncome = 0;
        trackedRemainingSavings = 0;
        trackedRemainingExpenses = 0;
        trackedExcessIncome = 0;
        trackedExcessSavings = 0;
        trackedExcessExpenses = 0;

        foreach (var item in BudgetCompletion!.GetType().GetProperties())
        {
            decimal category = (decimal)item.GetValue(BudgetCompletion, null)!;

            if (item.Name.Contains("Income"))
            {
                if (category >= 0)
                {
                    trackedRemainingIncome += category;
                }
                else if (category <= 0)
                {
                    trackedExcessIncome += Math.Abs(category);
                }
            }
            if (item.Name.Contains("Savings"))
            {
                if
                (category >= 0)
                {
                    trackedRemainingSavings += category;
                }
                else if (category <= 0)
                {
                    trackedExcessSavings += Math.Abs(category);
                }
            }
            if (item.Name.Contains("Expenses"))
            {
                if
                (category >= 0)
                {
                    trackedRemainingExpenses += category;
                }
                else if (category <= 0)
                {
                    trackedExcessExpenses += Math.Abs(category);
                }
            }
        }
    }
}
