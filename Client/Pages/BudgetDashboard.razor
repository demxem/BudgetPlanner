@page "/budgetdashboard"
@using Client.Models
@inject Client.Services.IncomeApiClient incomeApiClient
@inject Client.Services.SavingsApiClient savingsApiClient
@inject Client.Services.ExpensesApiClient expensesApiClient
@inject Client.Services.YearApiClient yearsApiClient
@inject Client.Services.CompletedBudgetApiService budgetCompletion
@inject Client.Services.MonthsApiClient monthsApiClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager UriHelper
@inject IMessageService MessageService
@inject DatePicker datePicker


<style>
    body {
        background-color: #e4d6a1f7;
        padding: 0;
        margin: 0;
        width: 100%;
        height: 100vh;
    }

    .container {
        padding: 0%;
        margin: 0%;
        width: 100%;
        overflow: auto;
        display: flex;
        align-items: flex-start;
    }

    td {
        text-align: center;
        border: 1px solid rgb(190, 190, 190);
    }

    th {
        text-align: center;
        border: 1px solid rgb(190, 190, 190);
        padding: 5px;
    }

    th[scope='income-row'] {
        background-color: rgba(187, 171, 229);
    }

    th[scope='expenses-row'] {
        background-color: rgb(251, 180, 192);
    }

    th[scope='savings-row'] {
        background-color: rgb(135, 189, 228);
    }

    td[scope='income-col'] {
        background-color: rgb(187, 171, 229);
    }

    td[scope='expenses-col'] {
        background-color: rgb(251, 180, 192);
    }

    td[scope='savings-col'] {
        background-color: rgb(187, 225, 253);
    }

    td[scope='progress-col'] {
        padding: 0%;
    }

    table {
        border-collapse: collapse;
        border: 2px solid rgb(200, 200, 200);
        letter-spacing: 1px;
        font-family: sans-serif;
        font-size: 0.8rem;
    }

    select {
        font-size: 0.9rem;
        padding: 2px 5px;
    }

    .tables {
        display: grid;
        gap: 1.8rem;
        grid-template-columns: 12rem, auto, 23rem;

    }

    .charts {
        height: 40%;
        width: 40%;
        display: flex;
        gap: 1.8rem;
        flex-direction: column;
    }

    .progress {
        height: 100%;
        width: 100%;
        border-radius: 0px 0px 0px 0px;
        background-color: white;
    }
</style>

@* <header>
<p>
<div class="incline-block">
<div class="d-flex" style="max-width:100px;">
<MudDatePicker Label="Budget Year" @bind-Date="selectedPeriod" MinDate="@datePicker.MinimalPeriodInterval"
MaxDate="@datePicker.MaximumPeriodInteval" PickerClosed="@GetDataByMonthIdAsync" />
</div>
</div>
</p>
</header> *@

<body>
    <div class=container>
        <div class="tables">
            <div class="income-tab">
                <table>
                    <tr>
                        <th scope="income-row">Income</th>
                        <th scope="income-row">Tracked</th>
                        <th scope="income-row">Budget</th>
                        <th scope="income-row">%Compl.</th>
                        <th scope="income-row">Remaining</th>
                        <th scope="income-row">Excess</th>
                    </tr>
                    @if (TrackedBudgetIncome != null)
                    {
                        <tr>
                            <td>Employment</td>
                            <td>@TrackedBudgetIncome.Income.TrackedEmployment</td>
                            <td>@TrackedBudgetIncome.Income.Employment</td>
                            <td scope="progress-col">
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar"
                                        style="width: @BudgetCompletionPercent.IncomeCompletedEmployment%"
                                        aria-valuenow="@BudgetCompletionPercent.IncomeCompletedEmployment" aria-valuemin="0"
                                        aria-valuemax="100">
                                        @Decimal.Round(BudgetCompletionPercent.IncomeCompletedEmployment, 2)%
                                    </div>
                                </div>
                            </td>
                            @if (@BudgetCompletion.IncomeCompletedEmployment >= 0)
                            {
                                <td>@BudgetCompletion.IncomeCompletedEmployment</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.IncomeCompletedEmployment <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.IncomeCompletedEmployment)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>SideHustle</td>
                        <td>@TrackedBudgetIncome.Income.TrackedSideHustle</td>
                        <td>@TrackedBudgetIncome.Income.SideHustle</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.IncomeCompletedSidehustle%"
                                    aria-valuenow="@BudgetCompletionPercent.IncomeCompletedSidehustle" aria-valuemin="0"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.IncomeCompletedSidehustle, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.IncomeCompletedSidehustle >= 0)
                            {
                                <td>@BudgetCompletion.IncomeCompletedSidehustle</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.IncomeCompletedSidehustle <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.IncomeCompletedSidehustle)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Dividents</td>
                        <td>@TrackedBudgetIncome.Income.TrackedDividends</td>
                        <td>@TrackedBudgetIncome.Income.Dividends</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.IncomeCompletedDividends%"
                                    aria-valuenow="@BudgetCompletionPercent.IncomeCompletedDividends" aria-valuemin="0"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.IncomeCompletedDividends, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.IncomeCompletedDividends >= 0)
                            {
                                <td>@BudgetCompletion.IncomeCompletedDividends</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.IncomeCompletedDividends <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.IncomeCompletedDividends)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td scope="totalIncome-row">Total</td>
                        <td scope="totalIncome-row">@TrackedBudgetIncome.TrackedMonthlyIncome</td>
                        <td scope="totalIncome-row">@TrackedBudgetIncome.MonthlyIncome</td>
                        <td scope="totalIncome-row">%</td>
                        <td scope="totalIncome-row">@trackedRemainingIncome</td>
                        <td scope="totalIncome-row">@trackedExcessIncome</td>
                    </tr>
                    }
                    else
                    {
                        <h1>loading...</h1>
                    }
                </table>
            </div>
            <div class="table-2">
                <table>
                    <tr>
                        <th scope="savings-row">Savings</th>
                        <th scope="savings-row">Tracked</th>
                        <th scope="savings-row">Budget</th>
                        <th scope="savings-row">%Compl.</th>
                        <th scope="savings-row">Remaining</th>
                        <th scope="savings-row">Excess</th>
                    </tr>
                    @if (TrackedBudgetSavings != null)
                    {
                        <tr>
                            <td>Em.Fund</td>
                            <td>@TrackedBudgetSavings.Savings.TrackedEmergencyFund</td>
                            <td>@TrackedBudgetSavings.Savings.EmergencyFund</td>
                            <td scope="progress-col">
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar"
                                        style="width: @BudgetCompletionPercent.SavingsCompletedEmergencyFund%"
                                        aria-valuenow="@BudgetCompletionPercent.SavingsCompletedEmergencyFund"
                                        aria-valuemin="0" aria-valuemax="100">
                                        @Decimal.Round(BudgetCompletionPercent.SavingsCompletedEmergencyFund, 2)%
                                    </div>
                                </div>
                            </td>
                            @if (@BudgetCompletion.SavingsCompletedEmergencyFund >= 0)
                            {
                                <td>@BudgetCompletion.SavingsCompletedEmergencyFund</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.SavingsCompletedEmergencyFund <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.SavingsCompletedEmergencyFund)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Ret.Account</td>
                        <td>@TrackedBudgetSavings.Savings.TrackedRetirementAccount</td>
                        <td>@TrackedBudgetSavings.Savings.RetirementAccount</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.SavingsCompletedRetirementAccount%"
                                    aria-valuenow="@BudgetCompletionPercent.SavingsCompletedRetirementAccount"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.SavingsCompletedRetirementAccount,
                                    2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.SavingsCompletedRetirementAccount >= 0)
                            {
                                <td>@BudgetCompletion.SavingsCompletedRetirementAccount</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.SavingsCompletedRetirementAccount <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.SavingsCompletedRetirementAccount)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Vacation</td>
                        <td>@TrackedBudgetSavings.Savings.TrackedVacation</td>
                        <td>@TrackedBudgetSavings.Savings.Vacation</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.SavingsCompletedVacation%" aria-valuemin="0"
                                    aria-valuenow="@BudgetCompletionPercent.SavingsCompletedVacation"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.SavingsCompletedVacation, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.SavingsCompletedVacation >= 0)
                            {
                                <td>@BudgetCompletion.SavingsCompletedVacation</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.SavingsCompletedVacation <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.SavingsCompletedVacation)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>HealthNeeds</td>
                        <td>@TrackedBudgetSavings.Savings.TrackedHealthNeeds</td>
                        <td>@TrackedBudgetSavings.Savings.HealthNeeds</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.SavingsCompletedHealthNeeds%"
                                    aria-valuenow="@BudgetCompletionPercent.SavingsCompletedHealthNeeds"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.SavingsCompletedHealthNeeds, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.SavingsCompletedHealthNeeds >= 0)
                            {
                                <td>@BudgetCompletion.SavingsCompletedHealthNeeds</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.SavingsCompletedHealthNeeds <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.SavingsCompletedHealthNeeds)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td scope="totalSavings-row">Total</td>
                        <td scope="totalSavings-row">@TrackedBudgetSavings.TrackedMonthlySavings</td>
                        <td scope="totalSavings-row">@TrackedBudgetSavings.MonthlySavings</td>
                        <td scope="totalSavings-row">%</td>
                        <td scope="totalSavings-row">@trackedRemainingSavings</td>
                        <td scope="totalSavings-row">@trackedExcessSavings</td>
                    </tr>
                    }
                    else
                    {
                        <h1>loading...</h1>
                    }
                </table>
            </div>
            <div class="table-3">
                <table>
                    <tr>
                        <th scope="expenses-row">Expenses</th>
                        <th scope="expenses-row">Tracked</th>
                        <th scope="expenses-row">Budget</th>
                        <th scope="expenses-row">%Compl.</th>
                        <th scope="expenses-row">Remaining</th>
                        <th scope="expenses-row">Excess</th>
                    </tr>
                    @if (TrackedBudgetExpenses != null)
                    {
                        <tr>
                            <td>Housing</td>
                            <td>@TrackedBudgetExpenses.Expenses.TrackedHousing</td>
                            <td>@TrackedBudgetExpenses.Expenses.Housing</td>
                            <td scope="progress-col">
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar"
                                        style="width: @BudgetCompletionPercent.ExpensesCompletedHousing%"
                                        aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedHousing" aria-valuemin="0"
                                        aria-valuemax="100">
                                        @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedHousing, 2)%
                                    </div>
                                </div>
                            </td>
                            @if (@BudgetCompletion.ExpensesCompletedHousing >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedHousing</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedHousing <= 0)
                            {
                                <td>@Math.Abs(@BudgetCompletion.ExpensesCompletedHousing)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Groceries</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedGroceries</td>
                        <td>@TrackedBudgetExpenses.Expenses.Groceries</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedGroceries%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedGroceries"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedGroceries, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedGroceries >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedGroceries</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedGroceries <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedGroceries)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Utilities</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedUtilities</td>
                        <td>@TrackedBudgetExpenses.Expenses.Utilities</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedUtilities%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedUtilities"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedUtilities, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedUtilities >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedUtilities</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedUtilities <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedUtilities)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Vacation</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedVacation</td>
                        <td>@TrackedBudgetExpenses.Expenses.Vacation</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedVacation%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedVacation" aria-valuemin="0"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedVacation, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedVacation >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedVacation</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedVacation <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedVacation)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Transportation</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedTransportation</td>
                        <td>@TrackedBudgetExpenses.Expenses.Transportation</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedTransportation%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedTransportation"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedTransportation, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedTransportation >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedTransportation</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedTransportation <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedTransportation)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Medicine</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedMedicine</td>
                        <td>@TrackedBudgetExpenses.Expenses.Medicine</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedMedicine%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedMedicine" aria-valuemin="0"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedMedicine, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedMedicine >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedMedicine</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedMedicine <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedMedicine)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Clothing</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedClothing</td>
                        <td>@TrackedBudgetExpenses.Expenses.Clothing</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedClothing%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedClothing"
                                    aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedClothing, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedClothing >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedClothing</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedClothing <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedClothing)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Media</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedMedia</td>
                        <td>@TrackedBudgetExpenses.Expenses.Media</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedMedia%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedMedia" aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedMedia, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedMedia >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedMedia</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedMedia <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedMedia)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td>Insuranses</td>
                        <td>@TrackedBudgetExpenses.Expenses.TrackedInsuranses</td>
                        <td>@TrackedBudgetExpenses.Expenses.Insuranses</td>
                        <td scope="progress-col">
                            <div class="progress">
                                <div class="progress-bar" role="progressbar"
                                    style="width: @BudgetCompletionPercent.ExpensesCompletedInsuranses%"
                                    aria-valuenow="@BudgetCompletionPercent.ExpensesCompletedInsuranses"
                                    aria-valuemin="0" aria-valuemax="100">
                                    @Decimal.Round(BudgetCompletionPercent.ExpensesCompletedInsuranses, 2)%
                                </div>
                            </div>
                        </td>
                        @if (@BudgetCompletion.ExpensesCompletedInsuranses >= 0)
                            {
                                <td>@BudgetCompletion.ExpensesCompletedInsuranses</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                            @if (@BudgetCompletion.ExpensesCompletedInsuranses <= 0)
                            {
                                <td>@Math.Abs(BudgetCompletion.ExpensesCompletedInsuranses)</td>
                            }
                            else
                            {
                                <td>0.00</td>
                            }
                        </tr>
                        <tr>
                        <td scope="totalExpenses-row">Total</td>
                        <td scope="totalExpenses-row">@TrackedBudgetExpenses.TrackedMonthlyExpenses</td>
                        <td scope="totalExpenses-row">@TrackedBudgetExpenses.MonthlyExpenses</td>
                        <td scope="totalExpenses-row">%</td>
                        <td scope="totalExpenses-row">@trackedRemainingExpenses</td>
                        <td scope="totalExpenses-row">@trackedExcessExpenses</td>
                    </tr>
                    }
                    else
                    {
                        <h1>loading...</h1>
                    }
                </table>
            </div>
        </div>

        <div class="charts">
            <div class="income-chart">
                @if (TrackedIncomePieChart != null)
                {
                    <ApexChart TItem="PieChartModel" Title="Value">
                        <ApexPointSeries TItem="PieChartModel" Items="TrackedIncomePieChart" Name="Value"
                            SeriesType="SeriesType.Pie" XValue="@(e => e.Name)" YAggregate="@(e => e.Sum(e => e.Value))"
                            OrderByDescending="e=>e.Y" PointColor="e=> GetPointColor(e)" ShowDataLabels />

                     </ApexChart>
                }
            </div>
            <div class="income-chart">
                @if (TrackedSavingsPieChart != null)
                {
                    <ApexChart TItem="PieChartModel" Title="Value">
                        <ApexPointSeries TItem="PieChartModel" Items="TrackedSavingsPieChart" Name="Value"
                            SeriesType="SeriesType.Pie" XValue="@(e => e.Name)" YAggregate="@(e => e.Sum(e => e.Value))"
                            OrderByDescending="e=>e.Y" PointColor="e=> GetPointColor(e)" ShowDataLabels />
                     </ApexChart>
                }
            </div>
            <div class="expenses-chart">
                @if (TrackedExpensesPieChart != null)
                {
                    <ApexChart TItem="PieChartModel" Title="Value">
                        <ApexPointSeries TItem="PieChartModel" Items="TrackedExpensesPieChart" Name="Value"
                            SeriesType="SeriesType.Pie" XValue="@(e => e.Name)" YAggregate="@(e => e.Sum(e => e.Value))"
                            OrderByDescending="e=>e.Y" PointColor="e=> GetPointColor(e)" ShowDataLabels />

                     </ApexChart>
                }
            </div>
        </div>
    </div>
</body>



@code
{
    private decimal trackedRemainingIncome = 0;
    private decimal trackedRemainingSavings = 0;
    private decimal trackedRemainingExpenses = 0;
    private decimal trackedExcessIncome = 0;
    private decimal trackedExcessSavings = 0;
    private decimal trackedExcessExpenses = 0;

    private BudgetModel? TrackedBudgetIncome;
    private BudgetModel? TrackedBudgetSavings;
    private BudgetModel? TrackedBudgetExpenses;
    private List<PieChartModel> TrackedIncomePieChart { get; set; }
    private List<PieChartModel> TrackedSavingsPieChart { get; set; }
    private List<PieChartModel> TrackedExpensesPieChart { get; set; }

    private IEnumerable<BudgetModel>? Expenses = new List<BudgetModel>();
    private IEnumerable<BudgetModel>? Savings = new List<BudgetModel>();
    public IEnumerable<BudgetModel>? Income = new List<BudgetModel>();
    private IEnumerable<YearModel>? Years = new List<YearModel>();
    private IEnumerable<BudgetModel>? Months = new List<BudgetModel>();

    private BudgetCompletionModel BudgetCompletion = new BudgetCompletionModel();
    private BudgetCompletionModel BudgetCompletionPercent = new BudgetCompletionModel();
    private DateTime? selectedPeriod = DateTime.Today;


    protected override async Task OnInitializedAsync()
    {
        Years = await yearsApiClient.GetYearsAsync();
        Months = await monthsApiClient.GetMonthsAsync();
        TrackedBudgetIncome = await incomeApiClient.GetLatestIncomeAsync();
        TrackedIncomePieChart = SetIncomePieChart();
        TrackedBudgetSavings = await savingsApiClient.GetLatestSavingsAsync();
        TrackedSavingsPieChart = SetSavingsPieChart();
        TrackedBudgetExpenses = await expensesApiClient.GetLatestExpensesAsync();
        TrackedExpensesPieChart = SetExpensesPieChart();
        BudgetCompletion = await budgetCompletion.GetBudgetCompletionByMonthIdAsync(Months.Select(month =>
        month.Id).LastOrDefault());
        BudgetCompletionPercent = await budgetCompletion.GetBudgetCompletionByMonthIdInPercentAsync(Months.Select(month =>
        month.Id).LastOrDefault());
        CountTotalRemainingAndExcessBudget();
        datePicker.SetMinAndMaxYearPeriodForCalendar(Years);
    }


    public async Task GetDataByMonthIdAsync()
    {
        int monthId = datePicker.FindMonthId(selectedPeriod, Years, Months);
        BudgetCompletion = await budgetCompletion.GetBudgetCompletionByMonthIdAsync(monthId);
        BudgetCompletionPercent = await budgetCompletion.GetBudgetCompletionByMonthIdInPercentAsync(monthId);
        await GetExpensesByMonthIdAsync(monthId);
        await GetIncomeByMonthIdAsync(monthId);
        await GetSavingsByMonthIdAsync(monthId);
        SetIncomePieChart();
        CountTotalRemainingAndExcessBudget();
    }

    public async Task GetSavingsByMonthIdAsync(int monthId)
    {
        TrackedBudgetSavings = await savingsApiClient.GetSavingsByMonthIdAsync(monthId);
        StateHasChanged();
    }
    public async Task GetIncomeByMonthIdAsync(int monthId)
    {
        TrackedBudgetIncome = await incomeApiClient.GetIncomeByMonthIdAsync(monthId);
        StateHasChanged();
    }
    public async Task GetExpensesByMonthIdAsync(int monthId)
    {
        TrackedBudgetExpenses = await expensesApiClient.GetExpensesByMonthIdAsync(monthId);
        StateHasChanged();
    }

    public void CountTotalRemainingAndExcessBudget()
    {
        trackedRemainingIncome = 0;
        trackedRemainingSavings = 0;
        trackedRemainingExpenses = 0;
        trackedExcessIncome = 0;
        trackedExcessSavings = 0;
        trackedExcessExpenses = 0;

        foreach (var item in BudgetCompletion.GetType().GetProperties())
        {
            decimal category = (decimal)item.GetValue(BudgetCompletion, null);
            if (item.Name.Contains("Income"))
            {
                if (category >= 0)
                {
                    trackedRemainingIncome += category;
                }
                else if (category <= 0)
                {
                    trackedExcessIncome += Math.Abs(category);
                }
            }

            if (item.Name.Contains("Savings"))
            {
                if (category >= 0)
                {
                    trackedRemainingSavings += category;
                }
                else if (category <= 0)
                {
                    trackedExcessSavings += Math.Abs(category);
                }
            }
            if (item.Name.Contains("Expenses"))
            {
                if (category >= 0)
                {
                    trackedRemainingExpenses += category;
                }
                else if (category <= 0)
                {
                    trackedExcessExpenses += Math.Abs(category);
                }
            }
        }
    }
    private List<PieChartModel> SetIncomePieChart()
    {
        List<PieChartModel> Chart = new List<PieChartModel>();
        Chart.Add(new PieChartModel { Name = "TrackedEmployment", Value = TrackedBudgetIncome.Income.TrackedEmployment });
        Chart.Add(new PieChartModel { Name = "TrackedDividends", Value = TrackedBudgetIncome.Income.Dividends });
        Chart.Add(new PieChartModel { Name = "TrackedSideHustle", Value = TrackedBudgetIncome.Income.TrackedSideHustle });
        return Chart;
    }
    private List<PieChartModel> SetSavingsPieChart()
    {
        List<PieChartModel> Chart = new List<PieChartModel>();
        Chart.Add(new PieChartModel
            {
                Name = "TrackedEmergencyFund",
                Value = TrackedBudgetSavings.Savings.TrackedEmergencyFund
            });
        Chart.Add(new PieChartModel
            {
                Name = "TrackedRetirementAccount",
                Value =
            TrackedBudgetSavings.Savings.TrackedRetirementAccount
            });
        Chart.Add(new PieChartModel { Name = "TrackedVacation", Value = TrackedBudgetSavings.Savings.TrackedVacation });
        Chart.Add(new PieChartModel { Name = "TrackedHealthNeeds", Value = TrackedBudgetSavings.Savings.TrackedHealthNeeds });

        return Chart;
    }
    private List<PieChartModel> SetExpensesPieChart()
    {
        List<PieChartModel> Chart = new List<PieChartModel>();
        Chart.Add(new PieChartModel { Name = "TrackedHousing", Value = TrackedBudgetExpenses.Expenses.TrackedHousing });
        Chart.Add(new PieChartModel { Name = "TrackedGroceries", Value = TrackedBudgetExpenses.Expenses.TrackedGroceries });
        Chart.Add(new PieChartModel { Name = "TrackedUtilities", Value = TrackedBudgetExpenses.Expenses.TrackedUtilities });
        Chart.Add(new PieChartModel { Name = "TrackedVacation", Value = TrackedBudgetExpenses.Expenses.TrackedVacation });
        Chart.Add(new PieChartModel
            {
                Name = "TrackedTransportation",
                Value = TrackedBudgetExpenses.Expenses.TrackedTransportation
            });
        Chart.Add(new PieChartModel { Name = "TrackedMedicine", Value = TrackedBudgetExpenses.Expenses.TrackedMedicine });
        Chart.Add(new PieChartModel { Name = "TrackedClothing", Value = TrackedBudgetExpenses.Expenses.TrackedClothing });
        Chart.Add(new PieChartModel { Name = "TrackedMedia", Value = TrackedBudgetExpenses.Expenses.TrackedMedia });
        Chart.Add(new PieChartModel { Name = "TrackedInsuranses", Value = TrackedBudgetExpenses.Expenses.TrackedInsuranses });

        return Chart;
    }



    private string GetPointColor(PieChartModel model)
    {
        switch (model.Name)
        {
            case "TrackedEmployment":
                return "#e3001b";
            case "TrackedSideHustle":
                return "#005ba3";
            case "TrackedDividends":
                return "#ffd500";
            case "TrackedEmergencyFund":
                return "#e3001b";
            case "TrackedRetirementAccount":
                return "#005ba3";
            case "TrackedVacation":
                return "#ffd500";
            case "TrackedHealthNeeds":
                return "#00783c";
            case "TrackedHousing":
                return "#e3001b";
            case "TrackedGroceries":
                return "#005ba3";
            case "TrackedUtilities":
                return "#ffd500";
            case "TrackedMedicine":
                return "#00783c";
            default:
                return "#87775d";
        }
    }
}

